
==================== FINAL INTERFACE ====================
2016-06-23 03:43:40.888573 UTC

interface main@main:Main 7103
  interface hash: 184c6feb68767299d216a939095d981c
  ABI hash: dff8a5865fac5033869b3d0b4f15c9eb
  export-list hash: 55a08dea7d0c9591845c0e0a74e991f2
  orphan hash: 9a54d48907a1846dc0545b4282f4aaf8
  flag hash: 75c78a9c11f9d54e240d6d2a6afe00ef
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.addOp
  Main.andOp
  Main.appExp
  Main.arith
  Main.atom
  Main.boolExp
  Main.boolOps
  Main.callStmt
  Main.compOp
  Main.compOps
  Main.conj
  Main.disj
  Main.eval
  Main.exec
  Main.expr
  Main.factor
  Main.funExp
  Main.ifExp
  Main.ifStmt
  Main.int
  Main.intExp
  Main.intOps
  Main.letExp
  Main.liftBoolOp
  Main.liftCompOp
  Main.liftIntOp
  Main.main
  Main.mulOp
  Main.orOp
  Main.parens
  Main.printStmt
  Main.procStmt
  Main.quitStmt
  Main.repl
  Main.run
  Main.seqStmt
  Main.setStmt
  Main.stmt
  Main.symbol
  Main.term
  Main.var
  Main.varExp
  Main.Env
  Main.Exp{Main.AppExp Main.BoolExp Main.BoolOpExp Main.CompOpExp Main.FunExp Main.IfExp Main.IntExp Main.IntOpExp Main.LetExp Main.VarExp}
  Main.PEnv
  Main.Result
  Main.Stmt{Main.CallStmt Main.IfStmt Main.PrintStmt Main.ProcedureStmt Main.QuitStmt Main.SeqStmt Main.SetStmt}
  Main.Val{Main.BoolVal Main.CloVal Main.ExnVal Main.IntVal}
module dependencies:
package dependencies: array-0.5.1.0@array_67iodizgJQIIxYVTp4emlA
                      base-4.8.2.0* binary-0.7.5.0@binar_3uXFWMoAGBg0xKP9MHKRwi
                      bytestring-0.10.6.0@bytes_6VWy06pWzJq9evDvK2d4w6
                      containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU
                      deepseq-1.4.1.1@deeps_6vMKxt5sPFR0XsbRWvvq59 ghc-prim-0.4.0.0
                      hashable-1.2.4.0@hasha_EalUWgp8NarBYWPbvYAD8I integer-gmp-1.0.0.0
                      mtl-2.2.1@mtl_Aue4leSeVkpKLsfHIV51E8
                      parsec-3.1.11@parse_AtBt9uDOS2NCyWnucTHV3y
                      text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne
                      transformers-0.4.2.0@trans_GZTjP9K5WFq01xC9BAGQpF
                      unordered-containers-0.2.7.1@unord_5iWC5HdL16JGHXLbsgBJnw*
orphans: base-4.8.2.0:GHC.Base base-4.8.2.0:GHC.Float
         binary-0.7.5.0@binar_3uXFWMoAGBg0xKP9MHKRwi:Data.Binary.Generic
         bytestring-0.10.6.0@bytes_6VWy06pWzJq9evDvK2d4w6:Data.ByteString.Builder
         hashable-1.2.4.0@hasha_EalUWgp8NarBYWPbvYAD8I:Data.Hashable.Generic
         text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text
         text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text.Lazy
         text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text.Show
         transformers-0.4.2.0@trans_GZTjP9K5WFq01xC9BAGQpF:Control.Monad.Trans.Error
family instance modules: base-4.8.2.0:Control.Applicative
                         base-4.8.2.0:Data.Either base-4.8.2.0:Data.Functor.Identity
                         base-4.8.2.0:Data.Monoid base-4.8.2.0:Data.Type.Equality
                         base-4.8.2.0:Data.Void base-4.8.2.0:GHC.Exts
                         base-4.8.2.0:GHC.Generics
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.IntMap.Base
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.IntSet.Base
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Map.Base
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Sequence
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Set.Base
                         text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text
                         text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text.Lazy
                         unordered-containers-0.2.7.1@unord_5iWC5HdL16JGHXLbsgBJnw:Data.HashMap.Base
import  -/  base-4.8.2.0:Control.Monad 480c5067477275068c9b98be08410df9
import  -/  base-4.8.2.0:Data.Either e8724afd65fd432cfe9a54014f5f762d
import  -/  base-4.8.2.0:GHC.Base 1db77db5dae73d8c424c85b09fbadb89
import  -/  base-4.8.2.0:GHC.IO.Handle 631f32e0ad65df940f6a2b3e721d8452
import  -/  base-4.8.2.0:GHC.IO.Handle.FD 43ef1c409a5b322c789fa1f7098e143b
import  -/  base-4.8.2.0:GHC.List 0c736920522bbd14b770342776012ab6
import  -/  base-4.8.2.0:GHC.Num 9f42750c866f5832ca565146bd660c60
import  -/  base-4.8.2.0:GHC.Real 1281efa9baf803bc7859d7efb89a38b3
import  -/  base-4.8.2.0:GHC.Show 0e1d8380a8fb0cfb07ebeda3b70cbf38
import  -/  base-4.8.2.0:Prelude 694dcaf039efe62df1c44834e2dbd2fb
import  -/  base-4.8.2.0:System.IO 0899686bfc1d9ef72dff3de85e99862a
import  -/  base-4.8.2.0:Text.Read ef0ef92fb7358ae94bab089940adfd2a
import  -/  ghc-prim-0.4.0.0:GHC.Classes e1f4ff80f7b5262008a595d29986fb18
import  -/  ghc-prim-0.4.0.0:GHC.Types 6b27fb3fdbd0e3f0925a4496c66513bb
import  -/  parsec-3.1.11@parse_AtBt9uDOS2NCyWnucTHV3y:Text.Parsec.Char 77b3557e3ecaea793fde214056c0a76d
import  -/  parsec-3.1.11@parse_AtBt9uDOS2NCyWnucTHV3y:Text.Parsec.Combinator 499c004f8668564f5c78d75c6516a398
import  -/  parsec-3.1.11@parse_AtBt9uDOS2NCyWnucTHV3y:Text.Parsec.Prim 655d3264df71f01577b89371493f8c14
import  -/  parsec-3.1.11@parse_AtBt9uDOS2NCyWnucTHV3y:Text.ParserCombinators.Parsec 979f7d9534fa46e0bd4704f6ae351173
import  -/  parsec-3.1.11@parse_AtBt9uDOS2NCyWnucTHV3y:Text.ParserCombinators.Parsec.Prim dd0438c632c68cbf50ea6b2a09757dc1
import  -/  unordered-containers-0.2.7.1@unord_5iWC5HdL16JGHXLbsgBJnw:Data.HashMap.Base e261c70f44a2a24aae3334c5288f8b06
import  -/  unordered-containers-0.2.7.1@unord_5iWC5HdL16JGHXLbsgBJnw:Data.HashMap.Strict 61bad71aa00dbaea83c2ac21aa08a7d9
333d8ccb2fc15a185269d3a5248f51e2
  $fEqExp :: GHC.Classes.Eq Main.Exp
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:. @ Main.Exp Main.$fEqExp_$c== Main.$fEqExp_$c/= -}
333d8ccb2fc15a185269d3a5248f51e2
  $fEqExp_$c/= :: Main.Exp -> Main.Exp -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a15 :: Main.Exp b :: Main.Exp ->
                 case Main.$fEqExp_$c== a15 b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
333d8ccb2fc15a185269d3a5248f51e2
  $fEqExp_$c== :: Main.Exp -> Main.Exp -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U> -}
ddb6393cd50eb50b9dca30622cff69ed
  $fEqStmt :: GHC.Classes.Eq Main.Stmt
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Main.Stmt Main.$fEqStmt_$c== Main.$fEqStmt_$c/= -}
ddb6393cd50eb50b9dca30622cff69ed
  $fEqStmt_$c/= :: Main.Stmt -> Main.Stmt -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a15 :: Main.Stmt b :: Main.Stmt ->
                 case Main.$fEqStmt_$c== a15 b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
ddb6393cd50eb50b9dca30622cff69ed
  $fEqStmt_$c== :: Main.Stmt -> Main.Stmt -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U> -}
0e5d1a14b5a49dddcbab86c634fbdc29
  $fEqVal :: GHC.Classes.Eq Main.Val
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:. @ Main.Val Main.$fEqVal_$c== Main.$fEqVal_$c/= -}
0e5d1a14b5a49dddcbab86c634fbdc29
  $fEqVal_$c/= :: Main.Val -> Main.Val -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a15 :: Main.Val b :: Main.Val ->
                 case Main.$fEqVal_$c== a15 b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
0e5d1a14b5a49dddcbab86c634fbdc29
  $fEqVal_$c== :: Main.Val -> Main.Val -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U> -}
333d8ccb2fc15a185269d3a5248f51e2
  $fShowExp :: GHC.Show.Show Main.Exp
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Main.Exp
                  Main.$fShowExp_$cshowsPrec
                  Main.$fShowExp_$cshow
                  Main.$fShowExp_$cshowList -}
333d8ccb2fc15a185269d3a5248f51e2
  $fShowExp1 :: Main.Exp -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ w :: Main.Exp w1 :: GHC.Base.String ->
                 Main.$w$cshowsPrec 0 w w1) -}
333d8ccb2fc15a185269d3a5248f51e2
  $fShowExp_$cshow :: Main.Exp -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x10 :: Main.Exp ->
                 Main.$fShowExp_$cshowsPrec
                   GHC.Show.shows18
                   x10
                   (GHC.Types.[] @ GHC.Types.Char)) -}
333d8ccb2fc15a185269d3a5248f51e2
  $fShowExp_$cshowList :: [Main.Exp] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__ @ Main.Exp Main.$fShowExp1) -}
333d8ccb2fc15a185269d3a5248f51e2
  $fShowExp_$cshowsPrec ::
    GHC.Types.Int -> Main.Exp -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S,1*U(U)><S,1*U><L,U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ w :: GHC.Types.Int w1 :: Main.Exp w2 :: GHC.Base.String ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Main.$w$cshowsPrec ww1 w1 w2 }) -}
ddb6393cd50eb50b9dca30622cff69ed
  $fShowStmt :: GHC.Show.Show Main.Stmt
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Main.Stmt
                  Main.$fShowStmt_$cshowsPrec
                  Main.$fShowStmt_$cshow
                  Main.$fShowStmt_$cshowList -}
ddb6393cd50eb50b9dca30622cff69ed
  $fShowStmt1 :: Main.Stmt -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (Main.$fShowStmt_$cshowsPrec Main.$fShowStmt2) -}
c299fe7fc86cc3abfd3ea77328049984
  $fShowStmt2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0) -}
ddb6393cd50eb50b9dca30622cff69ed
  $fShowStmt_$cshow :: Main.Stmt -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x10 :: Main.Stmt ->
                 Main.$fShowStmt_$cshowsPrec
                   GHC.Show.shows18
                   x10
                   (GHC.Types.[] @ GHC.Types.Char)) -}
ddb6393cd50eb50b9dca30622cff69ed
  $fShowStmt_$cshowList :: [Main.Stmt] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__ @ Main.Stmt Main.$fShowStmt1) -}
ddb6393cd50eb50b9dca30622cff69ed
  $fShowStmt_$cshowsPrec ::
    GHC.Types.Int -> Main.Stmt -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U> -}
0e5d1a14b5a49dddcbab86c634fbdc29
  $fShowVal :: GHC.Show.Show Main.Val
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Main.Val
                  Main.$fShowVal_$cshowsPrec
                  Main.$fShowVal_$cshow
                  Main.$fShowVal_$cshowList -}
0e5d1a14b5a49dddcbab86c634fbdc29
  $fShowVal1 :: Main.Val -> GHC.Base.String -> [GHC.Types.Char]
  {- Arity: 2 -}
0e5d1a14b5a49dddcbab86c634fbdc29
  $fShowVal_$cshow :: Main.Val -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U> -}
0e5d1a14b5a49dddcbab86c634fbdc29
  $fShowVal_$cshowList :: [Main.Val] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: (\ ls :: [Main.Val] s :: GHC.Base.String ->
                 GHC.Show.showList__ @ Main.Val Main.$fShowVal1 ls s) -}
0e5d1a14b5a49dddcbab86c634fbdc29
  $fShowVal_$cshowsPrec ::
    GHC.Types.Int -> Main.Val -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ w :: GHC.Types.Int w1 :: Main.Val w2 :: GHC.Base.String ->
                 Main.$fShowVal1 w1 w2) -}
03ba619fdd74ed406688762126df8fb7
  $s!1 :: v
  {- Strictness: b -}
56619969b7ded12ed01bde69b347e724
  $s!_$slookup ::
    GHC.Base.String
    -> Data.HashMap.Base.HashMap GHC.Base.String v -> GHC.Base.Maybe v
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,1*U>,
     Unfolding: (\ @ v
                   k0 :: GHC.Base.String
                   m0 :: Data.HashMap.Base.HashMap GHC.Base.String v ->
                 case Data.Hashable.Class.$wgo4
                        k0
                        (-2578643520546668380)
                        0 of ww2 { (#,#) ww3 ww4 ->
                 Main.$wpoly_go
                   @ v
                   (GHC.Prim.int2Word#
                      (GHC.Prim.xorI# (GHC.Prim.*# ww3 16777619) ww4))
                   k0
                   0
                   m0 }) -}
37116be2273e006437652243b2332ada
  $s$fEq(,) :: GHC.Classes.Eq ([GHC.Types.Char], Main.Exp)
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ ([GHC.Types.Char], Main.Exp)
                  (GHC.Classes.$fEq(,)_$c==
                     @ [GHC.Types.Char]
                     @ Main.Exp
                     Main.$s$fEq(,)1
                     Main.$fEqExp)
                  (GHC.Classes.$fEq(,)_$c/=
                     @ [GHC.Types.Char]
                     @ Main.Exp
                     Main.$s$fEq(,)1
                     Main.$fEqExp) -}
29e51a5bbe9c177d477114196cd638ed
  $s$fEq(,)1 :: GHC.Classes.Eq GHC.Base.String
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                GHC.Classes.$fEq[]_$s$fEq[]1 -}
d5bab96e4012da3ccbb9ef57bfa57142
  $s$wunion ::
    Data.HashMap.Base.HashMap GHC.Base.String v
    -> Data.HashMap.Base.HashMap GHC.Base.String v
    -> Data.HashMap.Base.HashMap GHC.Base.String v
  {- Arity: 2, Strictness: <S,U><S,1*U>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ @ v
                   w1 :: Data.HashMap.Base.HashMap GHC.Base.String v
                   w2 :: Data.HashMap.Base.HashMap GHC.Base.String v ->
                 Main.$wpoly_go3 @ v 0 w1 w2) -}
ec80836656bb1b2250fba566a0be5006
  $s$wupdateOrConcatWithKey ::
    (GHC.Base.String -> v -> v -> v)
    -> GHC.Prim.Array# (Data.HashMap.Base.Leaf GHC.Base.String v)
    -> GHC.Prim.Array# (Data.HashMap.Base.Leaf GHC.Base.String v)
    -> GHC.Prim.Array# (Data.HashMap.Base.Leaf GHC.Base.String v)
  {- Arity: 3, Strictness: <L,C(C1(C1(U)))><L,U><L,U>, Inline: [0],
     Unfolding: (\ @ v
                   w1 :: GHC.Base.String -> v -> v -> v
                   ww :: GHC.Prim.Array# (Data.HashMap.Base.Leaf GHC.Base.String v)
                   ww1 :: GHC.Prim.Array#
                            (Data.HashMap.Base.Leaf GHC.Base.String v) ->
                 let {
                   wild1 :: GHC.Prim.Int#
                   = GHC.Prim.sizeofArray#
                       @ (Data.HashMap.Base.Leaf GHC.Base.String v)
                       ww1
                 } in
                 case GHC.Prim.newArray#
                        @ (GHC.Base.Maybe GHC.Types.Int)
                        @ GHC.Prim.RealWorld
                        wild1
                        (Data.HashMap.Array.undefinedElem @ (GHC.Base.Maybe GHC.Types.Int))
                        GHC.Prim.realWorld# of ds { (#,#) ipv ipv1 ->
                 letrec {
                   $wa7 :: forall s.
                           Data.HashMap.Array.Array (Data.HashMap.Base.Leaf GHC.Base.String v)
                           -> Data.HashMap.Array.MArray s (GHC.Base.Maybe GHC.Types.Int)
                           -> GHC.Prim.Int#
                           -> GHC.Prim.Int#
                           -> GHC.Prim.State# s
                           -> (# GHC.Prim.State# s,
                                 Data.HashMap.Array.MArray s (GHC.Base.Maybe GHC.Types.Int) #)
                     {- Arity: 5, Strictness: <L,U(U)><L,U(U)><L,U><L,U><L,U>,
                        Inline: [0] -}
                   = \ @ s
                       w :: Data.HashMap.Array.Array
                              (Data.HashMap.Base.Leaf GHC.Base.String v)
                       w2 :: Data.HashMap.Array.MArray s (GHC.Base.Maybe GHC.Types.Int)
                       ww2 :: GHC.Prim.Int#
                       ww3 :: GHC.Prim.Int#
                       w3 :: GHC.Prim.State# s[OneShot] ->
                     case GHC.Prim.tagToEnum#
                            @ GHC.Types.Bool
                            (GHC.Prim.>=# ww2 ww3) of wild2 {
                       GHC.Types.False
                       -> case w2 of wild4 { Data.HashMap.Array.MArray ds1 ->
                          case GHC.Prim.writeArray#
                                 @ s
                                 @ (GHC.Base.Maybe GHC.Types.Int)
                                 ds1
                                 ww2
                                 (case w of wild5 { Data.HashMap.Array.Array ds2 ->
                                  case GHC.Prim.indexArray#
                                         @ (Data.HashMap.Base.Leaf GHC.Base.String v)
                                         ds2
                                         ww2 of ds4 { (##) ipv2 ->
                                  case ipv2 of wild6 { Data.HashMap.Base.L k1 ds3 ->
                                  Main.$wpoly_go1
                                    @ v
                                    k1
                                    ww
                                    0
                                    (GHC.Prim.sizeofArray#
                                       @ (Data.HashMap.Base.Leaf GHC.Base.String v)
                                       ww) } } })
                                 w3 of s' { DEFAULT ->
                          $wa7 @ s w wild4 (GHC.Prim.+# ww2 1) ww3 s' } }
                       GHC.Types.True -> (# w3, w2 #) }
                 } in
                 case $wa7
                        @ GHC.Prim.RealWorld
                        (Data.HashMap.Array.Array
                           @ (Data.HashMap.Base.Leaf GHC.Base.String v)
                           ww1)
                        (Data.HashMap.Array.$WMArray
                           @ GHC.Prim.RealWorld
                           @ (GHC.Base.Maybe GHC.Types.Int)
                           ipv1)
                        0
                        wild1
                        ipv of ds1 { (#,#) ipv2 ipv3 ->
                 case ipv3 of wild { Data.HashMap.Array.MArray ds2 ->
                 case GHC.Prim.unsafeFreezeArray#
                        @ GHC.Prim.RealWorld
                        @ (GHC.Base.Maybe GHC.Types.Int)
                        ds2
                        ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                 case Main.$wgo
                        (Data.HashMap.Array.Array @ (GHC.Base.Maybe GHC.Types.Int) ipv5)
                        (GHC.Prim.sizeofArray# @ (GHC.Base.Maybe GHC.Types.Int) ipv5)
                        0
                        0 of ww2 { DEFAULT ->
                 let {
                   a15 :: GHC.Prim.Int#
                   = GHC.Prim.sizeofArray#
                       @ (Data.HashMap.Base.Leaf GHC.Base.String v)
                       ww
                 } in
                 case GHC.Prim.newArray#
                        @ (Data.HashMap.Base.Leaf GHC.Base.String v)
                        @ GHC.Prim.RealWorld
                        (GHC.Prim.+# a15 ww2)
                        (Data.HashMap.Array.undefinedElem
                           @ (Data.HashMap.Base.Leaf GHC.Base.String v))
                        GHC.Prim.realWorld# of ds4 { (#,#) ipv7 ipv8 ->
                 case GHC.Prim.copyArray#
                        @ (Data.HashMap.Base.Leaf GHC.Base.String v)
                        @ GHC.Prim.RealWorld
                        ww
                        0
                        ipv8
                        0
                        a15
                        ipv7 of s2 { DEFAULT ->
                 letrec {
                   $wa8 :: GHC.Prim.Int#
                           -> GHC.Prim.Int#
                           -> GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                     {- Arity: 3, Strictness: <L,U><L,U><L,U>, Inline: [0] -}
                   = \ ww3 :: GHC.Prim.Int#
                       ww4 :: GHC.Prim.Int#
                       w :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                     case GHC.Prim.tagToEnum#
                            @ GHC.Types.Bool
                            (GHC.Prim.>=# ww4 wild1) of wild2 {
                       GHC.Types.False
                       -> case GHC.Prim.indexArray#
                                 @ (GHC.Base.Maybe GHC.Types.Int)
                                 ipv5
                                 ww4 of ds5 { (##) ipv9 ->
                          case ipv9 of wild3 {
                            GHC.Base.Nothing
                            -> case GHC.Prim.indexArray#
                                      @ (Data.HashMap.Base.Leaf GHC.Base.String v)
                                      ww1
                                      ww4 of ds6 { (##) ipv10 ->
                               case GHC.Prim.writeArray#
                                      @ GHC.Prim.RealWorld
                                      @ (Data.HashMap.Base.Leaf GHC.Base.String v)
                                      ipv8
                                      ww3
                                      ipv10
                                      w of s' { DEFAULT ->
                               $wa8 (GHC.Prim.+# ww3 1) (GHC.Prim.+# ww4 1) s' } }
                            GHC.Base.Just i3
                            -> case i3 of wild4 { GHC.Types.I# i# ->
                               case GHC.Prim.indexArray#
                                      @ (Data.HashMap.Base.Leaf GHC.Base.String v)
                                      ww
                                      i# of ds6 { (##) ipv10 ->
                               case ipv10 of wild5 { Data.HashMap.Base.L k1 v1 ->
                               case GHC.Prim.indexArray#
                                      @ (Data.HashMap.Base.Leaf GHC.Base.String v)
                                      ww1
                                      ww4 of ds7 { (##) ipv6 ->
                               case ipv6 of wild6 { Data.HashMap.Base.L ds8 v2 ->
                               case GHC.Prim.writeArray#
                                      @ GHC.Prim.RealWorld
                                      @ (Data.HashMap.Base.Leaf GHC.Base.String v)
                                      ipv8
                                      i#
                                      (Data.HashMap.Base.L @ GHC.Base.String @ v k1 (w1 k1 v1 v2))
                                      w of s' { DEFAULT ->
                               $wa8 ww3 (GHC.Prim.+# ww4 1) s' } } } } } } } }
                       GHC.Types.True -> (# w, GHC.Tuple.() #) }
                 } in
                 case $wa8 a15 0 s2 of ds5 { (#,#) ipv9 ipv10 ->
                 case GHC.Prim.unsafeFreezeArray#
                        @ GHC.Prim.RealWorld
                        @ (Data.HashMap.Base.Leaf GHC.Base.String v)
                        ipv8
                        ipv9 of ds6 { (#,#) ipv11 ipv12 ->
                 ipv12 } } } } } } } } }) -}
eca623398390f9745c0fa3c2edc4c214
  $s$wupdateOrSnocWithKey ::
    (GHC.Base.String -> v -> v -> v)
    -> GHC.Base.String
    -> v
    -> GHC.Prim.Array# (Data.HashMap.Base.Leaf GHC.Base.String v)
    -> GHC.Prim.Array# (Data.HashMap.Base.Leaf GHC.Base.String v)
  {- Arity: 4, Strictness: <L,C(C1(C1(U)))><S,1*U><L,U><S,U>,
     Inline: [0],
     Unfolding: (\ @ v
                   w1 :: GHC.Base.String -> v -> v -> v
                   w2 :: GHC.Base.String
                   w3 :: v
                   ww :: GHC.Prim.Array# (Data.HashMap.Base.Leaf GHC.Base.String v) ->
                 letrec {
                   $wgo1 :: GHC.Base.String
                            -> v
                            -> GHC.Prim.Array# (Data.HashMap.Base.Leaf GHC.Base.String v)
                            -> GHC.Prim.Int#
                            -> GHC.Prim.Int#
                            -> GHC.Prim.Array# (Data.HashMap.Base.Leaf GHC.Base.String v)
                     {- Arity: 5, Strictness: <S,1*U><L,U><S,U><L,U><L,U>,
                        Inline: [0] -}
                   = \ w :: GHC.Base.String
                       w4 :: v
                       ww1 :: GHC.Prim.Array# (Data.HashMap.Base.Leaf GHC.Base.String v)
                       ww2 :: GHC.Prim.Int#
                       ww3 :: GHC.Prim.Int# ->
                     case w of k2 { DEFAULT ->
                     case GHC.Prim.tagToEnum#
                            @ GHC.Types.Bool
                            (GHC.Prim.>=# ww2 ww3) of wild {
                       GHC.Types.False
                       -> case GHC.Prim.indexArray#
                                 @ (Data.HashMap.Base.Leaf GHC.Base.String v)
                                 ww1
                                 ww2 of ds { (##) ipv3 ->
                          case ipv3 of wild1 { Data.HashMap.Base.L kx y ->
                          case GHC.Base.eqString k2 kx of wild2 {
                            GHC.Types.False -> $wgo1 k2 w4 ww1 (GHC.Prim.+# ww2 1) ww3
                            GHC.Types.True
                            -> case GHC.Prim.thawArray#
                                      @ (Data.HashMap.Base.Leaf GHC.Base.String v)
                                      @ GHC.Prim.RealWorld
                                      ww1
                                      0
                                      (GHC.Prim.sizeofArray#
                                         @ (Data.HashMap.Base.Leaf GHC.Base.String v)
                                         ww1)
                                      GHC.Prim.realWorld# of ds1 { (#,#) ipv4 ipv5 ->
                               case GHC.Prim.writeArray#
                                      @ GHC.Prim.RealWorld
                                      @ (Data.HashMap.Base.Leaf GHC.Base.String v)
                                      ipv5
                                      ww2
                                      (Data.HashMap.Base.L @ GHC.Base.String @ v k2 (w1 k2 w4 y))
                                      ipv4 of s' { DEFAULT ->
                               case GHC.Prim.unsafeFreezeArray#
                                      @ GHC.Prim.RealWorld
                                      @ (Data.HashMap.Base.Leaf GHC.Base.String v)
                                      ipv5
                                      s' of ds2 { (#,#) ipv6 ipv7 ->
                               ipv7 } } } } } }
                       GHC.Types.True
                       -> case GHC.Prim.newArray#
                                 @ (Data.HashMap.Base.Leaf GHC.Base.String v)
                                 @ GHC.Prim.RealWorld
                                 (GHC.Prim.+# ww3 1)
                                 (Data.HashMap.Array.undefinedElem
                                    @ (Data.HashMap.Base.Leaf GHC.Base.String v))
                                 GHC.Prim.realWorld# of ds { (#,#) ipv3 ipv4 ->
                          case GHC.Prim.copyArray#
                                 @ (Data.HashMap.Base.Leaf GHC.Base.String v)
                                 @ GHC.Prim.RealWorld
                                 ww1
                                 0
                                 ipv4
                                 0
                                 ww3
                                 ipv3 of s2 { DEFAULT ->
                          case GHC.Prim.writeArray#
                                 @ GHC.Prim.RealWorld
                                 @ (Data.HashMap.Base.Leaf GHC.Base.String v)
                                 ipv4
                                 ww3
                                 (Data.HashMap.Base.L @ GHC.Base.String @ v k2 w4)
                                 s2 of s' { DEFAULT ->
                          case GHC.Prim.unsafeFreezeArray#
                                 @ GHC.Prim.RealWorld
                                 @ (Data.HashMap.Base.Leaf GHC.Base.String v)
                                 ipv4
                                 s' of ds1 { (#,#) ipv5 ipv6 ->
                          ipv6 } } } } } }
                 } in
                 $wgo1
                   w2
                   w3
                   ww
                   0
                   (GHC.Prim.sizeofArray#
                      @ (Data.HashMap.Base.Leaf GHC.Base.String v)
                      ww)) -}
c2a73dae240cefcae2cca6024d143c7a
  $sinsert ::
    GHC.Base.String
    -> v
    -> Data.HashMap.Base.HashMap GHC.Base.String v
    -> Data.HashMap.Base.HashMap GHC.Base.String v
  {- Arity: 3, Strictness: <S,U><L,U><S,1*U>,
     Unfolding: (\ @ v
                   k0 :: GHC.Base.String
                   v0 :: v
                   m0 :: Data.HashMap.Base.HashMap GHC.Base.String v ->
                 case Data.Hashable.Class.$wgo4
                        k0
                        (-2578643520546668380)
                        0 of ww2 { (#,#) ww3 ww4 ->
                 Main.$wpoly_go4
                   @ v
                   (GHC.Prim.int2Word#
                      (GHC.Prim.xorI# (GHC.Prim.*# ww3 16777619) ww4))
                   k0
                   v0
                   0
                   m0 }) -}
0f0ae95d4ce81d8f783f512a4ef277ea
  $sunsafeInsert ::
    GHC.Base.String
    -> v
    -> Data.HashMap.Base.HashMap GHC.Base.String v
    -> Data.HashMap.Base.HashMap GHC.Base.String v
  {- Arity: 3, Strictness: <S,U><L,U><S,1*U>,
     Unfolding: (\ @ v
                   k0 :: GHC.Base.String
                   v0 :: v
                   m0 :: Data.HashMap.Base.HashMap GHC.Base.String v ->
                 case Data.Hashable.Class.$wgo4
                        k0
                        (-2578643520546668380)
                        0 of ww2 { (#,#) ww3 ww4 ->
                 case Main.$wa
                        @ v
                        @ GHC.Prim.RealWorld
                        (GHC.Prim.int2Word#
                           (GHC.Prim.xorI# (GHC.Prim.*# ww3 16777619) ww4))
                        k0
                        v0
                        0
                        m0
                        GHC.Prim.realWorld# of ds { (#,#) ipv ipv1 ->
                 ipv1 } }) -}
333d8ccb2fc15a185269d3a5248f51e2
  $w$cshowsPrec ::
    GHC.Prim.Int# -> Main.Exp -> GHC.Base.String -> GHC.Base.String
  {- Arity: 3, Strictness: <L,U><S,1*U><L,U>, Inline: [0] -}
cf3ca87cf2d653dc91e3374dedebb6d0
  $wa ::
    GHC.Prim.Word#
    -> GHC.Base.String
    -> v
    -> GHC.Prim.Int#
    -> Data.HashMap.Base.HashMap GHC.Base.String v
    -> GHC.Prim.State# s
    -> (# GHC.Prim.State# s,
          Data.HashMap.Base.HashMap GHC.Base.String v #)
  {- Arity: 6, Strictness: <L,U><S,1*U><L,U><L,U><S,1*U><L,U>,
     Inline: [0] -}
3510f1da3e84ac64987a4e68796b5e96
  $wa1 ::
    Text.Parsec.Prim.State [GHC.Types.Char] st
    -> ((Main.Exp -> Main.Exp -> Main.Exp)
        -> Text.Parsec.Prim.State [GHC.Types.Char] st
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> ((Main.Exp -> Main.Exp -> Main.Exp)
        -> Text.Parsec.Prim.State [GHC.Types.Char] st
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 4,
     Strictness: <L,U(U,U(U,U,U),U)><L,C(C1(C1(U)))><L,C(C1(C1(U)))><L,U>,
     Inline: [0],
     Unfolding: (\ @ st
                   @ b1
                   w :: Text.Parsec.Prim.State [GHC.Types.Char] st
                   w1 :: (Main.Exp -> Main.Exp -> Main.Exp)
                         -> Text.Parsec.Prim.State [GHC.Types.Char] st
                         -> Text.Parsec.Error.ParseError
                         -> Data.Functor.Identity.Identity b1
                   w2 :: (Main.Exp -> Main.Exp -> Main.Exp)
                         -> Text.Parsec.Prim.State [GHC.Types.Char] st
                         -> Text.Parsec.Error.ParseError
                         -> Data.Functor.Identity.Identity b1
                   w3 :: Text.Parsec.Error.ParseError
                         -> Data.Functor.Identity.Identity b1 ->
                 Main.andOp3
                   @ st
                   Main.andOp2
                   @ b1
                   w
                   (\ x10 :: GHC.Base.String
                      s2 :: Text.Parsec.Prim.State [GHC.Types.Char] st[OneShot]
                      err :: Text.Parsec.Error.ParseError[OneShot] ->
                    w1
                      Main.andOp_x
                      s2
                      (case s2 of wild { Text.Parsec.Prim.State ds3 ds4 ds5 ->
                       case ds4 of ww10 { Text.Parsec.Pos.SourcePos ww11 ww12 ww13 ->
                       case err of ww { Text.Parsec.Error.ParseError ww1 ww2 ->
                       case ww1 of ww3 { Text.Parsec.Pos.SourcePos ww4 ww5 ww6 ->
                       case Text.Parsec.Error.$wmergeError
                              ww4
                              ww5
                              ww6
                              ww2
                              ww11
                              ww12
                              ww13
                              (GHC.Types.[]
                                 @ Text.Parsec.Error.Message) of ww14 { (#,#) ww15 ww16 ->
                       Text.Parsec.Error.ParseError ww15 ww16 } } } } }))
                   w3
                   (\ x10 :: GHC.Base.String
                      s2 :: Text.Parsec.Prim.State [GHC.Types.Char] st[OneShot]
                      err :: Text.Parsec.Error.ParseError[OneShot] ->
                    w2
                      Main.andOp_x
                      s2
                      (case s2 of wild { Text.Parsec.Prim.State ds3 ds4 ds5 ->
                       case ds4 of ww10 { Text.Parsec.Pos.SourcePos ww11 ww12 ww13 ->
                       case err of ww { Text.Parsec.Error.ParseError ww1 ww2 ->
                       case ww1 of ww3 { Text.Parsec.Pos.SourcePos ww4 ww5 ww6 ->
                       case Text.Parsec.Error.$wmergeError
                              ww4
                              ww5
                              ww6
                              ww2
                              ww11
                              ww12
                              ww13
                              (GHC.Types.[]
                                 @ Text.Parsec.Error.Message) of ww14 { (#,#) ww15 ww16 ->
                       Text.Parsec.Error.ParseError ww15 ww16 } } } } }))
                   w3) -}
2957cfc4a4a0cc764f6fe3210f36259f
  $wa2 ::
    Text.Parsec.Prim.State [GHC.Types.Char] st
    -> ((Main.Exp -> Main.Exp -> Main.Exp)
        -> Text.Parsec.Prim.State [GHC.Types.Char] st
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> ((Main.Exp -> Main.Exp -> Main.Exp)
        -> Text.Parsec.Prim.State [GHC.Types.Char] st
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 4,
     Strictness: <L,U(U,U(U,U,U),U)><L,C(C1(C1(U)))><L,C(C1(C1(U)))><L,U>,
     Inline: [0],
     Unfolding: (\ @ st
                   @ b1
                   w :: Text.Parsec.Prim.State [GHC.Types.Char] st
                   w1 :: (Main.Exp -> Main.Exp -> Main.Exp)
                         -> Text.Parsec.Prim.State [GHC.Types.Char] st
                         -> Text.Parsec.Error.ParseError
                         -> Data.Functor.Identity.Identity b1
                   w2 :: (Main.Exp -> Main.Exp -> Main.Exp)
                         -> Text.Parsec.Prim.State [GHC.Types.Char] st
                         -> Text.Parsec.Error.ParseError
                         -> Data.Functor.Identity.Identity b1
                   w3 :: Text.Parsec.Error.ParseError
                         -> Data.Functor.Identity.Identity b1 ->
                 Main.andOp3
                   @ st
                   Main.appExp5
                   @ b1
                   w
                   (\ x10 :: GHC.Base.String
                      s2 :: Text.Parsec.Prim.State [GHC.Types.Char] st[OneShot]
                      err :: Text.Parsec.Error.ParseError[OneShot] ->
                    w1
                      Main.appExp_x
                      s2
                      (case s2 of wild { Text.Parsec.Prim.State ds3 ds4 ds5 ->
                       case ds4 of ww10 { Text.Parsec.Pos.SourcePos ww11 ww12 ww13 ->
                       case err of ww { Text.Parsec.Error.ParseError ww1 ww2 ->
                       case ww1 of ww3 { Text.Parsec.Pos.SourcePos ww4 ww5 ww6 ->
                       case Text.Parsec.Error.$wmergeError
                              ww4
                              ww5
                              ww6
                              ww2
                              ww11
                              ww12
                              ww13
                              (GHC.Types.[]
                                 @ Text.Parsec.Error.Message) of ww14 { (#,#) ww15 ww16 ->
                       Text.Parsec.Error.ParseError ww15 ww16 } } } } }))
                   w3
                   (\ x10 :: GHC.Base.String
                      s2 :: Text.Parsec.Prim.State [GHC.Types.Char] st[OneShot]
                      err :: Text.Parsec.Error.ParseError[OneShot] ->
                    w2
                      Main.appExp_x
                      s2
                      (case s2 of wild { Text.Parsec.Prim.State ds3 ds4 ds5 ->
                       case ds4 of ww10 { Text.Parsec.Pos.SourcePos ww11 ww12 ww13 ->
                       case err of ww { Text.Parsec.Error.ParseError ww1 ww2 ->
                       case ww1 of ww3 { Text.Parsec.Pos.SourcePos ww4 ww5 ww6 ->
                       case Text.Parsec.Error.$wmergeError
                              ww4
                              ww5
                              ww6
                              ww2
                              ww11
                              ww12
                              ww13
                              (GHC.Types.[]
                                 @ Text.Parsec.Error.Message) of ww14 { (#,#) ww15 ww16 ->
                       Text.Parsec.Error.ParseError ww15 ww16 } } } } }))
                   w3) -}
eb9db09e9817ad3d73aaa1908521e7df
  $wa3 ::
    Text.Parsec.Prim.State [GHC.Types.Char] u
    -> ((Main.Exp -> Main.Exp -> Main.Exp)
        -> Text.Parsec.Prim.State [GHC.Types.Char] u
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> ((Main.Exp -> Main.Exp -> Main.Exp)
        -> Text.Parsec.Prim.State [GHC.Types.Char] u
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> Data.Functor.Identity.Identity b
  {- Arity: 4,
     Strictness: <L,U(U,U(U,U,U),U)><L,C(C1(C1(U)))><L,C(C1(C1(U)))><L,C(U)>,
     Inline: [0] -}
608bc8f2a03a0918a6fcba5142b58352
  $wa4 ::
    Main.PEnv
    -> Main.Env
    -> [GHC.Base.String]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Main.Result #)
  {- Arity: 4, Strictness: <L,U><L,U><S,1*U><L,U>, Inline: [0] -}
0b288cf3fe3bc4e1573cdf588335c4cb
  $wexec ::
    Main.Stmt
    -> Main.PEnv
    -> Main.Env
    -> (# GHC.Base.String, Main.PEnv, Main.Env #)
  {- Arity: 3, Strictness: <S,1*U><L,U><L,U>, Inline: [0] -}
c8a246259854dff26b34844b87b8f330
  $wgo ::
    Data.HashMap.Array.Array (GHC.Base.Maybe GHC.Types.Int)
    -> GHC.Prim.Int# -> GHC.Prim.Int# -> GHC.Prim.Int# -> GHC.Prim.Int#
  {- Arity: 4, HasNoCafRefs, Strictness: <L,U(U)><L,U><L,U><L,U>,
     Inline: [0] -}
7ee498ae8cc6046e95dbb38cc98de057
  $wpoly_go ::
    GHC.Prim.Word#
    -> GHC.Base.String
    -> GHC.Prim.Int#
    -> Data.HashMap.Base.HashMap GHC.Base.String v
    -> GHC.Base.Maybe v
  {- Arity: 4, HasNoCafRefs, Strictness: <L,U><S,1*U><L,U><S,1*U>,
     Inline: [0] -}
579309f0431dc31791860b46f073fa53
  $wpoly_go1 ::
    GHC.Base.String
    -> GHC.Prim.Array# (Data.HashMap.Base.Leaf GHC.Base.String v)
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Base.Maybe GHC.Types.Int
  {- Arity: 4, HasNoCafRefs, Strictness: <S,1*U><S,U><L,U><L,U>,
     Inline: [0] -}
c057d05eb556ed6e58d8b625959f2cdc
  $wpoly_go2 ::
    GHC.Base.String
    -> GHC.Prim.Array# (Data.HashMap.Base.Leaf GHC.Base.String v)
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Base.Maybe v
  {- Arity: 4, HasNoCafRefs, Strictness: <S,1*U><S,U><L,U><L,U>,
     Inline: [0] -}
3d22dfb2d8ca647fac09d7f0f6dbdd09
  $wpoly_go3 ::
    GHC.Prim.Int#
    -> Data.HashMap.Base.HashMap GHC.Base.String v
    -> Data.HashMap.Base.HashMap GHC.Base.String v
    -> Data.HashMap.Base.HashMap GHC.Base.String v
  {- Arity: 3, Strictness: <L,U><S,U><S,1*U>, Inline: [0] -}
c42e16cf7649a3ad7f8f0f08d63cc73a
  $wpoly_go4 ::
    GHC.Prim.Word#
    -> GHC.Base.String
    -> v
    -> GHC.Prim.Int#
    -> Data.HashMap.Base.HashMap GHC.Base.String v
    -> Data.HashMap.Base.HashMap GHC.Base.String v
  {- Arity: 5, Strictness: <L,U><S,1*U><L,U><L,U><S,1*U>,
     Inline: [0] -}
0e5d1a14b5a49dddcbab86c634fbdc29
  type Env = Data.HashMap.Base.HashMap GHC.Base.String Main.Val
333d8ccb2fc15a185269d3a5248f51e2
  data Exp
    = IntExp GHC.Types.Int
    | BoolExp GHC.Types.Bool
    | FunExp [GHC.Base.String] Main.Exp
    | LetExp [(GHC.Base.String, Main.Exp)] Main.Exp
    | AppExp Main.Exp [Main.Exp]
    | IfExp Main.Exp Main.Exp Main.Exp
    | IntOpExp GHC.Base.String Main.Exp Main.Exp
    | BoolOpExp GHC.Base.String Main.Exp Main.Exp
    | CompOpExp GHC.Base.String Main.Exp Main.Exp
    | VarExp GHC.Base.String
fe341c854514db25f03ac6634ea83885
  type PEnv = Data.HashMap.Base.HashMap GHC.Base.String Main.Stmt
8d7bca69975f7a803945074a01df6de6
  type Result = (GHC.Base.String, Main.PEnv, Main.Env)
ddb6393cd50eb50b9dca30622cff69ed
  data Stmt
    = SetStmt GHC.Base.String Main.Exp
    | PrintStmt Main.Exp
    | QuitStmt
    | IfStmt Main.Exp Main.Stmt Main.Stmt
    | ProcedureStmt GHC.Base.String [GHC.Base.String] Main.Stmt
    | CallStmt GHC.Base.String [Main.Exp]
    | SeqStmt [Main.Stmt]
0e5d1a14b5a49dddcbab86c634fbdc29
  data Val
    = IntVal GHC.Types.Int
    | BoolVal GHC.Types.Bool
    | CloVal [GHC.Base.String] Main.Exp Main.Env
    | ExnVal GHC.Base.String
8af20a11256ebe0a9fc799e841c6737e
  addOp ::
    Text.Parsec.Prim.Stream s m GHC.Types.Char =>
    Text.Parsec.Prim.ParsecT s u m (Main.Exp -> Main.Exp -> Main.Exp)
  {- Arity: 6,
     Strictness: <L,U(U(U,U,U,U,U),C(U))><L,U(U,U(U,U,U),U)><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                Main.addOp2
                  `cast`
                (forall s u (m :: * -> *).
                 <Text.Parsec.Prim.Stream s m GHC.Types.Char>_R
                 ->_R Sym (Text.Parsec.Prim.NTCo:ParsecT[0]
                               <s>_R <u>_R <m>_R <Main.Exp -> Main.Exp -> Main.Exp>_R)) -}
4d084c8f06f72d376712e44249123972
  addOp1 ::
    Text.Parsec.Prim.State [GHC.Types.Char] u
    -> ((Main.Exp -> Main.Exp -> Main.Exp)
        -> Text.Parsec.Prim.State [GHC.Types.Char] u
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> ((Main.Exp -> Main.Exp -> Main.Exp)
        -> Text.Parsec.Prim.State [GHC.Types.Char] u
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> Data.Functor.Identity.Identity b
  {- Arity: 5,
     Strictness: <L,U(U,U(U,U,U),U)><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,C(U)> -}
a39832b9f0a0c427065c16bbf068dd02
  addOp2 ::
    Text.Parsec.Prim.Stream s m GHC.Types.Char =>
    forall b.
    Text.Parsec.Prim.State s u
    -> ((Main.Exp -> Main.Exp -> Main.Exp)
        -> Text.Parsec.Prim.State s u
        -> Text.Parsec.Error.ParseError
        -> m b)
    -> (Text.Parsec.Error.ParseError -> m b)
    -> ((Main.Exp -> Main.Exp -> Main.Exp)
        -> Text.Parsec.Prim.State s u
        -> Text.Parsec.Error.ParseError
        -> m b)
    -> (Text.Parsec.Error.ParseError -> m b)
    -> m b
  {- Arity: 6,
     Strictness: <L,U(U(U,U,U,U,U),C(U))><L,U(U,U(U,U,U),U)><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,C(U)> -}
91d460063692e445c2a77ff8b4d0d0ec
  andOp ::
    Text.Parsec.Prim.ParsecT
      [GHC.Types.Char]
      st
      Data.Functor.Identity.Identity
      (Main.Exp -> Main.Exp -> Main.Exp)
  {- Arity: 5,
     Strictness: <L,U(U,U(U,U,U),U)><L,C(C1(C1(U)))><L,A><L,C(C1(C1(U)))><L,U>,
     Unfolding: InlineRule (0, True, True)
                Main.andOp1
                  `cast`
                (forall st.
                 Sym (Text.Parsec.Prim.NTCo:ParsecT[0]
                          <[GHC.Types.Char]>_R
                          <st>_R
                          <Data.Functor.Identity.Identity>_R
                          <Main.Exp -> Main.Exp -> Main.Exp>_R)) -}
24426454d05acbb00f7c11c17642eabb
  andOp1 ::
    Text.Parsec.Prim.State [GHC.Types.Char] st
    -> ((Main.Exp -> Main.Exp -> Main.Exp)
        -> Text.Parsec.Prim.State [GHC.Types.Char] st
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> ((Main.Exp -> Main.Exp -> Main.Exp)
        -> Text.Parsec.Prim.State [GHC.Types.Char] st
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5,
     Strictness: <L,U(U,U(U,U,U),U)><L,C(C1(C1(U)))><L,A><L,C(C1(C1(U)))><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (5, True, True)
                (\ @ st
                   @ b1
                   w :: Text.Parsec.Prim.State [GHC.Types.Char] st
                   w1 :: (Main.Exp -> Main.Exp -> Main.Exp)
                         -> Text.Parsec.Prim.State [GHC.Types.Char] st
                         -> Text.Parsec.Error.ParseError
                         -> Data.Functor.Identity.Identity b1
                   w2 :: Text.Parsec.Error.ParseError
                         -> Data.Functor.Identity.Identity b1
                   w3 :: (Main.Exp -> Main.Exp -> Main.Exp)
                         -> Text.Parsec.Prim.State [GHC.Types.Char] st
                         -> Text.Parsec.Error.ParseError
                         -> Data.Functor.Identity.Identity b1
                   w4 :: Text.Parsec.Error.ParseError
                         -> Data.Functor.Identity.Identity b1 ->
                 Main.$wa1 @ st @ b1 w w1 w3 w4) -}
4db82e38026101bae50092cc6520f2db
  andOp2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "and"#) -}
5f1226ad788deccf3efdcecaed1bd626
  andOp3 ::
    GHC.Base.String
    -> forall b.
       Text.Parsec.Prim.State [GHC.Types.Char] u
       -> (GHC.Base.String
           -> Text.Parsec.Prim.State [GHC.Types.Char] u
           -> Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b)
       -> (Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b)
       -> (GHC.Base.String
           -> Text.Parsec.Prim.State [GHC.Types.Char] u
           -> Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b)
       -> (Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b)
       -> Data.Functor.Identity.Identity b
  {- Arity: 6,
     Strictness: <S,U><L,U(U,U(U,U,U),U)><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,C(U)> -}
e3971d4de855de3202b014b874154cc5
  andOp_x :: Main.Exp -> Main.Exp -> Main.Exp
  {- Arity: 2, Unfolding: (Main.BoolOpExp Main.andOp2) -}
451a508b8bc0fc2b85eac158bfe76fa8
  appExp ::
    Text.Parsec.Prim.ParsecT
      [GHC.Types.Char] st Data.Functor.Identity.Identity Main.Exp
  {- Arity: 5,
     Strictness: <L,U(U,U(U,U,U),U)><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,U>,
     Unfolding: InlineRule (0, True, True)
                Main.appExp1
                  `cast`
                (forall st.
                 Sym (Text.Parsec.Prim.NTCo:ParsecT[0]
                          <[GHC.Types.Char]>_R
                          <st>_R
                          <Data.Functor.Identity.Identity>_R
                          <Main.Exp>_R)) -}
3b3a701dad953012f07f64dc10130de1
  appExp1 ::
    Text.Parsec.Prim.State [GHC.Types.Char] st
    -> (Main.Exp
        -> Text.Parsec.Prim.State [GHC.Types.Char] st
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Main.Exp
        -> Text.Parsec.Prim.State [GHC.Types.Char] st
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5,
     Strictness: <L,U(U,U(U,U,U),U)><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,U>,
     Unfolding: (\ @ st
                   @ b1
                   eta :: Text.Parsec.Prim.State [GHC.Types.Char] st
                   eta1 :: Main.Exp
                           -> Text.Parsec.Prim.State [GHC.Types.Char] st
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1
                   eta2 :: Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1
                   eta3 :: Main.Exp
                           -> Text.Parsec.Prim.State [GHC.Types.Char] st
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1
                   eta4 :: Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1 ->
                 Main.andOp3
                   @ st
                   Main.appExp13
                   @ b1
                   eta
                   (\ x10 :: GHC.Base.String
                      s2 :: Text.Parsec.Prim.State [GHC.Types.Char] st[OneShot]
                      err :: Text.Parsec.Error.ParseError[OneShot] ->
                    Main.appExp2
                      @ st
                      @ b1
                      s2
                      eta1
                      eta2
                      (\ x11 :: Main.Exp
                         s3 :: Text.Parsec.Prim.State [GHC.Types.Char] st[OneShot]
                         err' :: Text.Parsec.Error.ParseError[OneShot] ->
                       eta1 x11 s3 (Text.Parsec.Error.mergeError err err'))
                      (\ err' :: Text.Parsec.Error.ParseError ->
                       eta2 (Text.Parsec.Error.mergeError err err')))
                   eta4
                   (\ x10 :: GHC.Base.String
                      s2 :: Text.Parsec.Prim.State [GHC.Types.Char] st[OneShot]
                      err :: Text.Parsec.Error.ParseError[OneShot] ->
                    Main.appExp2
                      @ st
                      @ b1
                      s2
                      eta1
                      eta2
                      (\ x11 :: Main.Exp
                         s3 :: Text.Parsec.Prim.State [GHC.Types.Char] st[OneShot]
                         err' :: Text.Parsec.Error.ParseError[OneShot] ->
                       eta3 x11 s3 (Text.Parsec.Error.mergeError err err'))
                      (\ err' :: Text.Parsec.Error.ParseError ->
                       eta4 (Text.Parsec.Error.mergeError err err')))
                   eta4) -}
f230ebee302010e93093b5f58cfda536
  appExp10 ::
    Text.Parsec.Prim.State [GHC.Types.Char] st
    -> (Main.Exp
        -> Text.Parsec.Prim.State [GHC.Types.Char] st
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Main.Exp
        -> Text.Parsec.Prim.State [GHC.Types.Char] st
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> Data.Functor.Identity.Identity b
  {- Arity: 5,
     Strictness: <L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ st
                   @ b
                   eta2 :: Text.Parsec.Prim.State [GHC.Types.Char] st
                   eta3 :: Main.Exp
                           -> Text.Parsec.Prim.State [GHC.Types.Char] st
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b
                   eta4 :: Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b
                   eta5 :: Main.Exp
                           -> Text.Parsec.Prim.State [GHC.Types.Char] st
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b
                   eta6 :: Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b ->
                 Text.Parsec.Combinator.chainl3
                   @ [GHC.Types.Char]
                   @ st
                   @ Data.Functor.Identity.Identity
                   @ Main.Exp
                   (Main.appExp12 @ st)
                     `cast`
                   (Sym (Text.Parsec.Prim.NTCo:ParsecT[0]
                             <[GHC.Types.Char]>_R
                             <st>_R
                             <Data.Functor.Identity.Identity>_R
                             <Main.Exp>_R))
                   (Main.appExp11 @ st)
                     `cast`
                   (Sym (Text.Parsec.Prim.NTCo:ParsecT[0]
                             <[GHC.Types.Char]>_R
                             <st>_R
                             <Data.Functor.Identity.Identity>_R
                             <Main.Exp -> Main.Exp -> Main.Exp>_R))
                   @ b
                   eta2
                   eta3
                   eta4
                   eta5
                   eta6) -}
a1380aee557eef6412d8d31fe63a961b
  appExp11 ::
    Text.Parsec.Prim.State [GHC.Types.Char] u
    -> ((Main.Exp -> Main.Exp -> Main.Exp)
        -> Text.Parsec.Prim.State [GHC.Types.Char] u
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> ((Main.Exp -> Main.Exp -> Main.Exp)
        -> Text.Parsec.Prim.State [GHC.Types.Char] u
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> Data.Functor.Identity.Identity b
  {- Arity: 5,
     Strictness: <L,U(U,U(U,U,U),U)><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,C(U)> -}
3491e4fd020a1a22d738acb5a85bc949
  appExp12 ::
    Text.Parsec.Prim.State [GHC.Types.Char] st
    -> (Main.Exp
        -> Text.Parsec.Prim.State [GHC.Types.Char] st
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Main.Exp
        -> Text.Parsec.Prim.State [GHC.Types.Char] st
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> Data.Functor.Identity.Identity b
  {- Arity: 5,
     Strictness: <L,U(U,U(U,U,U),U)><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,C(U)> -}
c30165418b227158eda2da6b56a11a77
  appExp13 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "apply"#) -}
abddce20349a1d9f9cb115275e0d4846
  appExp2 ::
    Text.Parsec.Prim.State [GHC.Types.Char] st
    -> (Main.Exp
        -> Text.Parsec.Prim.State [GHC.Types.Char] st
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Main.Exp
        -> Text.Parsec.Prim.State [GHC.Types.Char] st
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5,
     Strictness: <L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,U>,
     Unfolding: (\ @ st
                   @ b1
                   eta :: Text.Parsec.Prim.State [GHC.Types.Char] st
                   eta1 :: Main.Exp
                           -> Text.Parsec.Prim.State [GHC.Types.Char] st
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1
                   eta2 :: Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1
                   eta3 :: Main.Exp
                           -> Text.Parsec.Prim.State [GHC.Types.Char] st
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1
                   eta4 :: Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1 ->
                 Text.Parsec.Combinator.chainl3
                   @ [GHC.Types.Char]
                   @ st
                   @ Data.Functor.Identity.Identity
                   @ Main.Exp
                   (Main.appExp6 @ st)
                     `cast`
                   (Sym (Text.Parsec.Prim.NTCo:ParsecT[0]
                             <[GHC.Types.Char]>_R
                             <st>_R
                             <Data.Functor.Identity.Identity>_R
                             <Main.Exp>_R))
                   (Main.appExp4 @ st)
                     `cast`
                   (Sym (Text.Parsec.Prim.NTCo:ParsecT[0]
                             <[GHC.Types.Char]>_R
                             <st>_R
                             <Data.Functor.Identity.Identity>_R
                             <Main.Exp -> Main.Exp -> Main.Exp>_R))
                   @ b1
                   eta
                   (\ x10 :: Main.Exp
                      s2 :: Text.Parsec.Prim.State [GHC.Types.Char] st[OneShot]
                      err :: Text.Parsec.Error.ParseError[OneShot] ->
                    Main.appExp3
                      @ st
                      x10
                      @ b1
                      s2
                      eta1
                      eta2
                      (\ x11 :: Main.Exp
                         s3 :: Text.Parsec.Prim.State [GHC.Types.Char] st[OneShot]
                         err' :: Text.Parsec.Error.ParseError[OneShot] ->
                       eta1 x11 s3 (Text.Parsec.Error.mergeError err err'))
                      (\ err' :: Text.Parsec.Error.ParseError ->
                       eta2 (Text.Parsec.Error.mergeError err err')))
                   eta2
                   (\ x10 :: Main.Exp
                      s2 :: Text.Parsec.Prim.State [GHC.Types.Char] st[OneShot]
                      err :: Text.Parsec.Error.ParseError[OneShot] ->
                    Main.appExp3
                      @ st
                      x10
                      @ b1
                      s2
                      eta1
                      eta2
                      (\ x11 :: Main.Exp
                         s3 :: Text.Parsec.Prim.State [GHC.Types.Char] st[OneShot]
                         err' :: Text.Parsec.Error.ParseError[OneShot] ->
                       eta3 x11 s3 (Text.Parsec.Error.mergeError err err'))
                      (\ err' :: Text.Parsec.Error.ParseError ->
                       eta4 (Text.Parsec.Error.mergeError err err')))
                   eta4) -}
b80281e8018a516f434e423f5e4ea8e9
  appExp3 ::
    Main.Exp
    -> forall b.
       Text.Parsec.Prim.State [GHC.Types.Char] st
       -> (Main.Exp
           -> Text.Parsec.Prim.State [GHC.Types.Char] st
           -> Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b)
       -> (Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b)
       -> (Main.Exp
           -> Text.Parsec.Prim.State [GHC.Types.Char] st
           -> Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b)
       -> (Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b)
       -> Data.Functor.Identity.Identity b
  {- Arity: 6,
     Strictness: <L,U><L,U(U,U(U,U,U),U)><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,C(U)> -}
f797aff78d819cb5f8925579171f6e88
  appExp4 ::
    Text.Parsec.Prim.State [GHC.Types.Char] st
    -> ((Main.Exp -> Main.Exp -> Main.Exp)
        -> Text.Parsec.Prim.State [GHC.Types.Char] st
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> ((Main.Exp -> Main.Exp -> Main.Exp)
        -> Text.Parsec.Prim.State [GHC.Types.Char] st
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5,
     Strictness: <L,U(U,U(U,U,U),U)><L,C(C1(C1(U)))><L,A><L,C(C1(C1(U)))><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (5, True, True)
                (\ @ st
                   @ b1
                   w :: Text.Parsec.Prim.State [GHC.Types.Char] st
                   w1 :: (Main.Exp -> Main.Exp -> Main.Exp)
                         -> Text.Parsec.Prim.State [GHC.Types.Char] st
                         -> Text.Parsec.Error.ParseError
                         -> Data.Functor.Identity.Identity b1
                   w2 :: Text.Parsec.Error.ParseError
                         -> Data.Functor.Identity.Identity b1
                   w3 :: (Main.Exp -> Main.Exp -> Main.Exp)
                         -> Text.Parsec.Prim.State [GHC.Types.Char] st
                         -> Text.Parsec.Error.ParseError
                         -> Data.Functor.Identity.Identity b1
                   w4 :: Text.Parsec.Error.ParseError
                         -> Data.Functor.Identity.Identity b1 ->
                 Main.$wa2 @ st @ b1 w w1 w3 w4) -}
bd5c18b2b7a8bc851192d8c5f699c9b0
  appExp5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "or"#) -}
d40dac6d250abf0fe9bffb34e57cbf2a
  appExp6 ::
    Text.Parsec.Prim.State [GHC.Types.Char] st
    -> (Main.Exp
        -> Text.Parsec.Prim.State [GHC.Types.Char] st
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Main.Exp
        -> Text.Parsec.Prim.State [GHC.Types.Char] st
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> Data.Functor.Identity.Identity b
  {- Arity: 5,
     Strictness: <L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ st
                   @ b
                   eta2 :: Text.Parsec.Prim.State [GHC.Types.Char] st
                   eta3 :: Main.Exp
                           -> Text.Parsec.Prim.State [GHC.Types.Char] st
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b
                   eta4 :: Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b
                   eta5 :: Main.Exp
                           -> Text.Parsec.Prim.State [GHC.Types.Char] st
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b
                   eta6 :: Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b ->
                 Text.Parsec.Combinator.chainl3
                   @ [GHC.Types.Char]
                   @ st
                   @ Data.Functor.Identity.Identity
                   @ Main.Exp
                   (Main.appExp7 @ st)
                     `cast`
                   (Sym (Text.Parsec.Prim.NTCo:ParsecT[0]
                             <[GHC.Types.Char]>_R
                             <st>_R
                             <Data.Functor.Identity.Identity>_R
                             <Main.Exp>_R))
                   (Main.andOp1 @ st)
                     `cast`
                   (Sym (Text.Parsec.Prim.NTCo:ParsecT[0]
                             <[GHC.Types.Char]>_R
                             <st>_R
                             <Data.Functor.Identity.Identity>_R
                             <Main.Exp -> Main.Exp -> Main.Exp>_R))
                   @ b
                   eta2
                   eta3
                   eta4
                   eta5
                   eta6) -}
666019d10ce5d9e5e847b1b8e5f2514b
  appExp7 ::
    Text.Parsec.Prim.State [GHC.Types.Char] st
    -> (Main.Exp
        -> Text.Parsec.Prim.State [GHC.Types.Char] st
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Main.Exp
        -> Text.Parsec.Prim.State [GHC.Types.Char] st
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> Data.Functor.Identity.Identity b
  {- Arity: 5,
     Strictness: <L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ st
                   @ b
                   eta2 :: Text.Parsec.Prim.State [GHC.Types.Char] st
                   eta3 :: Main.Exp
                           -> Text.Parsec.Prim.State [GHC.Types.Char] st
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b
                   eta4 :: Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b
                   eta5 :: Main.Exp
                           -> Text.Parsec.Prim.State [GHC.Types.Char] st
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b
                   eta6 :: Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b ->
                 Text.Parsec.Combinator.chainl3
                   @ [GHC.Types.Char]
                   @ st
                   @ Data.Functor.Identity.Identity
                   @ Main.Exp
                   (Main.appExp9 @ st)
                     `cast`
                   (Sym (Text.Parsec.Prim.NTCo:ParsecT[0]
                             <[GHC.Types.Char]>_R
                             <st>_R
                             <Data.Functor.Identity.Identity>_R
                             <Main.Exp>_R))
                   (Main.appExp8 @ st)
                     `cast`
                   (Sym (Text.Parsec.Prim.NTCo:ParsecT[0]
                             <[GHC.Types.Char]>_R
                             <st>_R
                             <Data.Functor.Identity.Identity>_R
                             <Main.Exp -> Main.Exp -> Main.Exp>_R))
                   @ b
                   eta2
                   eta3
                   eta4
                   eta5
                   eta6) -}
0df2c8773c55da7d08442e2558011c8d
  appExp8 ::
    Text.Parsec.Prim.State [GHC.Types.Char] u
    -> ((Main.Exp -> Main.Exp -> Main.Exp)
        -> Text.Parsec.Prim.State [GHC.Types.Char] u
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> ((Main.Exp -> Main.Exp -> Main.Exp)
        -> Text.Parsec.Prim.State [GHC.Types.Char] u
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> Data.Functor.Identity.Identity b
  {- Arity: 5,
     Strictness: <L,U(U,U(U,U,U),U)><L,C(C1(C1(U)))><L,A><L,C(C1(C1(U)))><L,C(U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (5, True, True)
                (\ @ u
                   @ b
                   w :: Text.Parsec.Prim.State [GHC.Types.Char] u
                   w1 :: (Main.Exp -> Main.Exp -> Main.Exp)
                         -> Text.Parsec.Prim.State [GHC.Types.Char] u
                         -> Text.Parsec.Error.ParseError
                         -> Data.Functor.Identity.Identity b
                   w2 :: Text.Parsec.Error.ParseError
                         -> Data.Functor.Identity.Identity b
                   w3 :: (Main.Exp -> Main.Exp -> Main.Exp)
                         -> Text.Parsec.Prim.State [GHC.Types.Char] u
                         -> Text.Parsec.Error.ParseError
                         -> Data.Functor.Identity.Identity b
                   w4 :: Text.Parsec.Error.ParseError
                         -> Data.Functor.Identity.Identity b ->
                 Main.$wa3 @ u @ b w w1 w3 w4) -}
c8412fcaaa3dc56f7b0f464e984fc7ce
  appExp9 ::
    Text.Parsec.Prim.State [GHC.Types.Char] st
    -> (Main.Exp
        -> Text.Parsec.Prim.State [GHC.Types.Char] st
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Main.Exp
        -> Text.Parsec.Prim.State [GHC.Types.Char] st
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> Data.Functor.Identity.Identity b
  {- Arity: 5,
     Strictness: <L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ st
                   @ b
                   eta2 :: Text.Parsec.Prim.State [GHC.Types.Char] st
                   eta3 :: Main.Exp
                           -> Text.Parsec.Prim.State [GHC.Types.Char] st
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b
                   eta4 :: Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b
                   eta5 :: Main.Exp
                           -> Text.Parsec.Prim.State [GHC.Types.Char] st
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b
                   eta6 :: Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b ->
                 Text.Parsec.Combinator.chainl3
                   @ [GHC.Types.Char]
                   @ st
                   @ Data.Functor.Identity.Identity
                   @ Main.Exp
                   (Main.appExp10 @ st)
                     `cast`
                   (Sym (Text.Parsec.Prim.NTCo:ParsecT[0]
                             <[GHC.Types.Char]>_R
                             <st>_R
                             <Data.Functor.Identity.Identity>_R
                             <Main.Exp>_R))
                   (Main.addOp1 @ st)
                     `cast`
                   (Sym (Text.Parsec.Prim.NTCo:ParsecT[0]
                             <[GHC.Types.Char]>_R
                             <st>_R
                             <Data.Functor.Identity.Identity>_R
                             <Main.Exp -> Main.Exp -> Main.Exp>_R))
                   @ b
                   eta2
                   eta3
                   eta4
                   eta5
                   eta6) -}
4bc71293b68ef9282a804df72da9d6b9
  appExp_x :: Main.Exp -> Main.Exp -> Main.Exp
  {- Arity: 2, Unfolding: (Main.BoolOpExp Main.appExp5) -}
fdb6db861094e386139ac06ca0f2b5f9
  arith ::
    Text.Parsec.Prim.ParsecT
      [GHC.Types.Char] st Data.Functor.Identity.Identity Main.Exp
  {- Arity: 5,
     Strictness: <L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,U>,
     Unfolding: InlineRule (0, True, True)
                Main.appExp9
                  `cast`
                (forall st.
                 Sym (Text.Parsec.Prim.NTCo:ParsecT[0]
                          <[GHC.Types.Char]>_R
                          <st>_R
                          <Data.Functor.Identity.Identity>_R
                          <Main.Exp>_R)) -}
172f3b6a8d7280493abdba45bc97e1c3
  atom ::
    Text.Parsec.Prim.ParsecT
      [GHC.Types.Char] st Data.Functor.Identity.Identity Main.Exp
  {- Arity: 5,
     Strictness: <L,U(U,U(U,U,U),U)><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                Main.appExp12
                  `cast`
                (forall st.
                 Sym (Text.Parsec.Prim.NTCo:ParsecT[0]
                          <[GHC.Types.Char]>_R
                          <st>_R
                          <Data.Functor.Identity.Identity>_R
                          <Main.Exp>_R)) -}
10a914063c6eca1a952d7beeb6d2bfd1
  boolExp ::
    Text.Parsec.Prim.Stream s m GHC.Types.Char =>
    Text.Parsec.Prim.ParsecT s u m Main.Exp
  {- Arity: 6,
     Strictness: <L,U(U(U,U,U,U,U),C(U))><L,U(U,U(U,U,U),U)><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                Main.boolExp6
                  `cast`
                (forall s u (m :: * -> *).
                 <Text.Parsec.Prim.Stream s m GHC.Types.Char>_R
                 ->_R Sym (Text.Parsec.Prim.NTCo:ParsecT[0]
                               <s>_R <u>_R <m>_R <Main.Exp>_R)) -}
a3c563a73eb3ed00d951577a0583e159
  boolExp2 ::
    Text.Parsec.Prim.State [GHC.Types.Char] u
    -> (Main.Exp
        -> Text.Parsec.Prim.State [GHC.Types.Char] u
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Main.Exp
        -> Text.Parsec.Prim.State [GHC.Types.Char] u
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5,
     Strictness: <L,U(U,U(U,U,U),U)><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Unfolding: (\ @ u
                   @ b1
                   eta :: Text.Parsec.Prim.State [GHC.Types.Char] u
                   eta1 :: Main.Exp
                           -> Text.Parsec.Prim.State [GHC.Types.Char] u
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1
                   eta2 :: Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1
                   eta3 :: Main.Exp
                           -> Text.Parsec.Prim.State [GHC.Types.Char] u
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1
                   eta4 :: Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1 ->
                 Main.andOp3
                   @ u
                   Main.boolExp3
                   @ b1
                   eta
                   (\ x10 :: GHC.Base.String
                      s2 :: Text.Parsec.Prim.State [GHC.Types.Char] u[OneShot]
                      err :: Text.Parsec.Error.ParseError[OneShot] ->
                    eta1
                      Main.boolExp_x
                      s2
                      (case s2 of wild { Text.Parsec.Prim.State ds3 ds4 ds5 ->
                       case ds4 of ww10 { Text.Parsec.Pos.SourcePos ww11 ww12 ww13 ->
                       case err of ww { Text.Parsec.Error.ParseError ww1 ww2 ->
                       case ww1 of ww3 { Text.Parsec.Pos.SourcePos ww4 ww5 ww6 ->
                       case Text.Parsec.Error.$wmergeError
                              ww4
                              ww5
                              ww6
                              ww2
                              ww11
                              ww12
                              ww13
                              (GHC.Types.[]
                                 @ Text.Parsec.Error.Message) of ww14 { (#,#) ww15 ww16 ->
                       Text.Parsec.Error.ParseError ww15 ww16 } } } } }))
                   eta2
                   (\ x10 :: GHC.Base.String
                      s2 :: Text.Parsec.Prim.State [GHC.Types.Char] u[OneShot]
                      err :: Text.Parsec.Error.ParseError[OneShot] ->
                    eta3
                      Main.boolExp_x
                      s2
                      (case s2 of wild { Text.Parsec.Prim.State ds3 ds4 ds5 ->
                       case ds4 of ww10 { Text.Parsec.Pos.SourcePos ww11 ww12 ww13 ->
                       case err of ww { Text.Parsec.Error.ParseError ww1 ww2 ->
                       case ww1 of ww3 { Text.Parsec.Pos.SourcePos ww4 ww5 ww6 ->
                       case Text.Parsec.Error.$wmergeError
                              ww4
                              ww5
                              ww6
                              ww2
                              ww11
                              ww12
                              ww13
                              (GHC.Types.[]
                                 @ Text.Parsec.Error.Message) of ww14 { (#,#) ww15 ww16 ->
                       Text.Parsec.Error.ParseError ww15 ww16 } } } } }))
                   eta4) -}
28550b61066123bb5b566326b831eda9
  boolExp3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "false"#) -}
a648454389daf55a081cb271369293e1
  boolExp4 ::
    Text.Parsec.Prim.State [GHC.Types.Char] u
    -> (Main.Exp
        -> Text.Parsec.Prim.State [GHC.Types.Char] u
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Main.Exp
        -> Text.Parsec.Prim.State [GHC.Types.Char] u
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5,
     Strictness: <L,U(U,U(U,U,U),U)><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Unfolding: (\ @ u
                   @ b1
                   eta :: Text.Parsec.Prim.State [GHC.Types.Char] u
                   eta1 :: Main.Exp
                           -> Text.Parsec.Prim.State [GHC.Types.Char] u
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1
                   eta2 :: Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1
                   eta3 :: Main.Exp
                           -> Text.Parsec.Prim.State [GHC.Types.Char] u
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1
                   eta4 :: Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1 ->
                 Main.andOp3
                   @ u
                   Main.boolExp5
                   @ b1
                   eta
                   (\ x10 :: GHC.Base.String
                      s2 :: Text.Parsec.Prim.State [GHC.Types.Char] u[OneShot]
                      err :: Text.Parsec.Error.ParseError[OneShot] ->
                    eta1
                      Main.boolExp_x1
                      s2
                      (case s2 of wild { Text.Parsec.Prim.State ds3 ds4 ds5 ->
                       case ds4 of ww10 { Text.Parsec.Pos.SourcePos ww11 ww12 ww13 ->
                       case err of ww { Text.Parsec.Error.ParseError ww1 ww2 ->
                       case ww1 of ww3 { Text.Parsec.Pos.SourcePos ww4 ww5 ww6 ->
                       case Text.Parsec.Error.$wmergeError
                              ww4
                              ww5
                              ww6
                              ww2
                              ww11
                              ww12
                              ww13
                              (GHC.Types.[]
                                 @ Text.Parsec.Error.Message) of ww14 { (#,#) ww15 ww16 ->
                       Text.Parsec.Error.ParseError ww15 ww16 } } } } }))
                   eta2
                   (\ x10 :: GHC.Base.String
                      s2 :: Text.Parsec.Prim.State [GHC.Types.Char] u[OneShot]
                      err :: Text.Parsec.Error.ParseError[OneShot] ->
                    eta3
                      Main.boolExp_x1
                      s2
                      (case s2 of wild { Text.Parsec.Prim.State ds3 ds4 ds5 ->
                       case ds4 of ww10 { Text.Parsec.Pos.SourcePos ww11 ww12 ww13 ->
                       case err of ww { Text.Parsec.Error.ParseError ww1 ww2 ->
                       case ww1 of ww3 { Text.Parsec.Pos.SourcePos ww4 ww5 ww6 ->
                       case Text.Parsec.Error.$wmergeError
                              ww4
                              ww5
                              ww6
                              ww2
                              ww11
                              ww12
                              ww13
                              (GHC.Types.[]
                                 @ Text.Parsec.Error.Message) of ww14 { (#,#) ww15 ww16 ->
                       Text.Parsec.Error.ParseError ww15 ww16 } } } } }))
                   eta4) -}
3f3320e6232353b2931da174f01c8941
  boolExp5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "true"#) -}
9fc401d11ea13fb50eb540109196380d
  boolExp6 ::
    Text.Parsec.Prim.Stream s m GHC.Types.Char =>
    forall b.
    Text.Parsec.Prim.State s u
    -> (Main.Exp
        -> Text.Parsec.Prim.State s u
        -> Text.Parsec.Error.ParseError
        -> m b)
    -> (Text.Parsec.Error.ParseError -> m b)
    -> (Main.Exp
        -> Text.Parsec.Prim.State s u
        -> Text.Parsec.Error.ParseError
        -> m b)
    -> (Text.Parsec.Error.ParseError -> m b)
    -> m b
  {- Arity: 6,
     Strictness: <L,U(U(U,U,U,U,U),C(U))><L,U(U,U(U,U,U),U)><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,C(U)> -}
5c39c054c4b15cae793b3659d843ef43
  boolExp_x :: Main.Exp
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (Main.BoolExp GHC.Types.False) -}
cc9c7cb1c46477b916f92333f17e8eee
  boolExp_x1 :: Main.Exp
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (Main.BoolExp GHC.Types.True) -}
172ae47f911fa37b016b74f429012c01
  boolOps ::
    Data.HashMap.Base.HashMap
      GHC.Base.String
      (GHC.Types.Bool -> GHC.Types.Bool -> GHC.Types.Bool)
  {- Unfolding: (Main.boolOps_go
                   Main.boolOps1
                   (Data.HashMap.Base.Empty
                      @ GHC.Base.String
                      @ (GHC.Types.Bool -> GHC.Types.Bool -> GHC.Types.Bool))) -}
f145399ad3491ca04bd1d51217708036
  boolOps1 ::
    [(GHC.Base.String,
      GHC.Types.Bool -> GHC.Types.Bool -> GHC.Types.Bool)]
  {- Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      GHC.Types.Bool -> GHC.Types.Bool -> GHC.Types.Bool)
                   Main.boolOps4
                   Main.boolOps2) -}
02cf64030b8cf3715d680b69626c1162
  boolOps2 ::
    [(GHC.Base.String,
      GHC.Types.Bool -> GHC.Types.Bool -> GHC.Types.Bool)]
  {- Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      GHC.Types.Bool -> GHC.Types.Bool -> GHC.Types.Bool)
                   Main.boolOps3
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         GHC.Types.Bool -> GHC.Types.Bool -> GHC.Types.Bool))) -}
b5e6a1bdabe00ece22df421fd610c5e2
  boolOps3 ::
    ([GHC.Types.Char],
     GHC.Types.Bool -> GHC.Types.Bool -> GHC.Types.Bool)
  {- Unfolding: ((Main.appExp5, GHC.Classes.||)) -}
5d16644bcf182a618c2dca92d435efcf
  boolOps4 ::
    ([GHC.Types.Char],
     GHC.Types.Bool -> GHC.Types.Bool -> GHC.Types.Bool)
  {- Unfolding: ((Main.andOp2, GHC.Classes.&&)) -}
fd3e005388b39dfc194a41720a24d7ad
  boolOps_go ::
    [(GHC.Base.String,
      GHC.Types.Bool -> GHC.Types.Bool -> GHC.Types.Bool)]
    -> Data.HashMap.Base.HashMap
         GHC.Base.String
         (GHC.Types.Bool -> GHC.Types.Bool -> GHC.Types.Bool)
    -> Data.HashMap.Base.HashMap
         GHC.Base.String
         (GHC.Types.Bool -> GHC.Types.Bool -> GHC.Types.Bool)
  {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
d2cc2028a7c618d58456b79190d25135
  callStmt ::
    Text.Parsec.Prim.ParsecT
      [GHC.Types.Char] st Data.Functor.Identity.Identity Main.Stmt
  {- Arity: 5,
     Strictness: <L,U(U,U(U,U,U),U)><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,U>,
     Unfolding: InlineRule (0, True, True)
                Main.callStmt1
                  `cast`
                (forall st.
                 Sym (Text.Parsec.Prim.NTCo:ParsecT[0]
                          <[GHC.Types.Char]>_R
                          <st>_R
                          <Data.Functor.Identity.Identity>_R
                          <Main.Stmt>_R)) -}
e080ea4b708764738549dc3c03155eed
  callStmt1 ::
    Text.Parsec.Prim.State [GHC.Types.Char] st
    -> (Main.Stmt
        -> Text.Parsec.Prim.State [GHC.Types.Char] st
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Main.Stmt
        -> Text.Parsec.Prim.State [GHC.Types.Char] st
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5,
     Strictness: <L,U(U,U(U,U,U),U)><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,U>,
     Unfolding: (\ @ st
                   @ b1
                   eta :: Text.Parsec.Prim.State [GHC.Types.Char] st
                   eta1 :: Main.Stmt
                           -> Text.Parsec.Prim.State [GHC.Types.Char] st
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1
                   eta2 :: Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1
                   eta3 :: Main.Stmt
                           -> Text.Parsec.Prim.State [GHC.Types.Char] st
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1
                   eta4 :: Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1 ->
                 Main.andOp3
                   @ st
                   Main.callStmt5
                   @ b1
                   eta
                   (\ x10 :: GHC.Base.String
                      s2 :: Text.Parsec.Prim.State [GHC.Types.Char] st[OneShot]
                      err :: Text.Parsec.Error.ParseError[OneShot] ->
                    Main.callStmt2
                      @ st
                      @ b1
                      s2
                      eta1
                      eta2
                      (\ x11 :: Main.Stmt
                         s3 :: Text.Parsec.Prim.State [GHC.Types.Char] st[OneShot]
                         err' :: Text.Parsec.Error.ParseError[OneShot] ->
                       eta1 x11 s3 (Text.Parsec.Error.mergeError err err'))
                      (\ err' :: Text.Parsec.Error.ParseError ->
                       eta2 (Text.Parsec.Error.mergeError err err')))
                   eta4
                   (\ x10 :: GHC.Base.String
                      s2 :: Text.Parsec.Prim.State [GHC.Types.Char] st[OneShot]
                      err :: Text.Parsec.Error.ParseError[OneShot] ->
                    Main.callStmt2
                      @ st
                      @ b1
                      s2
                      eta1
                      eta2
                      (\ x11 :: Main.Stmt
                         s3 :: Text.Parsec.Prim.State [GHC.Types.Char] st[OneShot]
                         err' :: Text.Parsec.Error.ParseError[OneShot] ->
                       eta3 x11 s3 (Text.Parsec.Error.mergeError err err'))
                      (\ err' :: Text.Parsec.Error.ParseError ->
                       eta4 (Text.Parsec.Error.mergeError err err')))
                   eta4) -}
39c143af542eb6d060ec3f331c9395f5
  callStmt2 ::
    Text.Parsec.Prim.State [GHC.Types.Char] st
    -> (Main.Stmt
        -> Text.Parsec.Prim.State [GHC.Types.Char] st
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Main.Stmt
        -> Text.Parsec.Prim.State [GHC.Types.Char] st
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5,
     Strictness: <L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Unfolding: (\ @ st
                   @ b1
                   eta :: Text.Parsec.Prim.State [GHC.Types.Char] st
                   eta1 :: Main.Stmt
                           -> Text.Parsec.Prim.State [GHC.Types.Char] st
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1
                   eta2 :: Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1
                   eta3 :: Main.Stmt
                           -> Text.Parsec.Prim.State [GHC.Types.Char] st
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1
                   eta4 :: Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1 ->
                 Main.callStmt4
                   @ st
                   @ b1
                   eta
                   (\ x10 :: [GHC.Types.Char]
                      s2 :: Text.Parsec.Prim.State [GHC.Types.Char] st[OneShot]
                      err :: Text.Parsec.Error.ParseError[OneShot] ->
                    Main.callStmt3
                      @ st
                      x10
                      @ b1
                      s2
                      eta1
                      eta2
                      (\ x11 :: Main.Stmt
                         s3 :: Text.Parsec.Prim.State [GHC.Types.Char] st[OneShot]
                         err' :: Text.Parsec.Error.ParseError[OneShot] ->
                       eta1 x11 s3 (Text.Parsec.Error.mergeError err err'))
                      (\ err' :: Text.Parsec.Error.ParseError ->
                       eta2 (Text.Parsec.Error.mergeError err err')))
                   eta2
                   (\ x10 :: [GHC.Types.Char]
                      s2 :: Text.Parsec.Prim.State [GHC.Types.Char] st[OneShot]
                      err :: Text.Parsec.Error.ParseError[OneShot] ->
                    Main.callStmt3
                      @ st
                      x10
                      @ b1
                      s2
                      eta1
                      eta2
                      (\ x11 :: Main.Stmt
                         s3 :: Text.Parsec.Prim.State [GHC.Types.Char] st[OneShot]
                         err' :: Text.Parsec.Error.ParseError[OneShot] ->
                       eta3 x11 s3 (Text.Parsec.Error.mergeError err err'))
                      (\ err' :: Text.Parsec.Error.ParseError ->
                       eta4 (Text.Parsec.Error.mergeError err err')))
                   eta4) -}
371b760d5819b7419a10106e234dd1fe
  callStmt3 ::
    [GHC.Types.Char]
    -> forall b.
       Text.Parsec.Prim.State [GHC.Types.Char] st
       -> (Main.Stmt
           -> Text.Parsec.Prim.State [GHC.Types.Char] st
           -> Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b)
       -> (Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b)
       -> (Main.Stmt
           -> Text.Parsec.Prim.State [GHC.Types.Char] st
           -> Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b)
       -> (Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b)
       -> Data.Functor.Identity.Identity b
  {- Arity: 6,
     Strictness: <L,U><L,U(U,U(U,U,U),U)><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,C(U)> -}
c24cc66708dea9b1f39cb44a7563d3e4
  callStmt4 ::
    Text.Parsec.Prim.State [GHC.Types.Char] u
    -> ([GHC.Types.Char]
        -> Text.Parsec.Prim.State [GHC.Types.Char] u
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> ([GHC.Types.Char]
        -> Text.Parsec.Prim.State [GHC.Types.Char] u
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5,
     Strictness: <L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,C(U)> -}
78df8719e072fd1b4d40bc7ccffce0b2
  callStmt5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "call"#) -}
41bcb2701a99d3030e7d4b4439a579fb
  compOp ::
    Text.Parsec.Prim.ParsecT
      [GHC.Types.Char]
      u
      Data.Functor.Identity.Identity
      (Main.Exp -> Main.Exp -> Main.Exp)
  {- Arity: 5,
     Strictness: <L,U(U,U(U,U,U),U)><L,C(C1(C1(U)))><L,A><L,C(C1(C1(U)))><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                Main.appExp8
                  `cast`
                (forall u.
                 Sym (Text.Parsec.Prim.NTCo:ParsecT[0]
                          <[GHC.Types.Char]>_R
                          <u>_R
                          <Data.Functor.Identity.Identity>_R
                          <Main.Exp -> Main.Exp -> Main.Exp>_R)) -}
04ad336acf3dccf40ed5b8a992b06cd8
  compOps ::
    Data.HashMap.Base.HashMap
      GHC.Base.String (GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Bool)
  {- Unfolding: (case Main.$sunsafeInsert
                        @ (GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Bool)
                        Main.compOps6
                        GHC.Classes.ltInt
                        (Data.HashMap.Base.Empty
                           @ GHC.Base.String
                           @ (GHC.Types.Int
                              -> GHC.Types.Int -> GHC.Types.Bool)) of z { DEFAULT ->
                 case Main.$sunsafeInsert
                        @ (GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Bool)
                        Main.compOps5
                        GHC.Classes.gtInt
                        z of z1 { DEFAULT ->
                 case Main.$sunsafeInsert
                        @ (GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Bool)
                        Main.compOps4
                        GHC.Classes.leInt
                        z1 of z2 { DEFAULT ->
                 case Main.$sunsafeInsert
                        @ (GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Bool)
                        Main.compOps3
                        GHC.Classes.geInt
                        z2 of z3 { DEFAULT ->
                 case Main.$sunsafeInsert
                        @ (GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Bool)
                        Main.compOps2
                        GHC.Classes.neInt
                        z3 of z4 { DEFAULT ->
                 Main.$sunsafeInsert
                   @ (GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Bool)
                   Main.compOps1
                   GHC.Classes.eqInt
                   z4 } } } } }) -}
156cc3b55bf2987caa30b0b42422d80b
  compOps1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "=="#) -}
541e5e40ecb12a53d65663956397fa54
  compOps2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "/="#) -}
f179184d033ce2e2f88ca5b0b3cb86c5
  compOps3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# ">="#) -}
728b99ec9cd7b92bdc0cb3075245132a
  compOps4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "<="#) -}
c8df19c510294b29a1b7f8da194be042
  compOps5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# ">"#) -}
820bf1af9a96e52a7a7b7affbb7a5b6e
  compOps6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "<"#) -}
dee1351bcaf942316c6f628324f418b2
  conj ::
    Text.Parsec.Prim.ParsecT
      [GHC.Types.Char] st Data.Functor.Identity.Identity Main.Exp
  {- Arity: 5,
     Strictness: <L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,U>,
     Unfolding: InlineRule (0, True, True)
                Main.appExp7
                  `cast`
                (forall st.
                 Sym (Text.Parsec.Prim.NTCo:ParsecT[0]
                          <[GHC.Types.Char]>_R
                          <st>_R
                          <Data.Functor.Identity.Identity>_R
                          <Main.Exp>_R)) -}
e0d5fafe9e27324fa7e7c6cc1b2202d6
  disj ::
    Text.Parsec.Prim.ParsecT
      [GHC.Types.Char] st Data.Functor.Identity.Identity Main.Exp
  {- Arity: 5,
     Strictness: <L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,U>,
     Unfolding: InlineRule (0, True, True)
                Main.appExp6
                  `cast`
                (forall st.
                 Sym (Text.Parsec.Prim.NTCo:ParsecT[0]
                          <[GHC.Types.Char]>_R
                          <st>_R
                          <Data.Functor.Identity.Identity>_R
                          <Main.Exp>_R)) -}
5447abfa74bd3cde132911a5102236fe
  eval :: Main.Exp -> Main.Env -> Main.Val
  {- Arity: 2, Strictness: <S,1*U><L,U> -}
dca6e649c79ed19a34f9ed39d34604f4
  exec :: Main.Stmt -> Main.PEnv -> Main.Env -> Main.Result
  {- Arity: 3, Strictness: <S,1*U><L,U><L,U>m, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ w :: Main.Stmt w1 :: Main.PEnv w2 :: Main.Env ->
                 case Main.$wexec w w1 w2 of ww { (#,,#) ww1 ww2 ww3 ->
                 (ww1, ww2, ww3) }) -}
f3835d45c799de17b1197ddec28d24e6
  expr ::
    Text.Parsec.Prim.ParsecT
      [GHC.Types.Char] st Data.Functor.Identity.Identity Main.Exp
  {- Arity: 5,
     Strictness: <L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,U>,
     Unfolding: InlineRule (0, True, True)
                Main.expr1
                  `cast`
                (forall st.
                 Sym (Text.Parsec.Prim.NTCo:ParsecT[0]
                          <[GHC.Types.Char]>_R
                          <st>_R
                          <Data.Functor.Identity.Identity>_R
                          <Main.Exp>_R)) -}
13f1d6c7d2f6f96ee55aef40bdc3d119
  expr1 ::
    Text.Parsec.Prim.State [GHC.Types.Char] st
    -> (Main.Exp
        -> Text.Parsec.Prim.State [GHC.Types.Char] st
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Main.Exp
        -> Text.Parsec.Prim.State [GHC.Types.Char] st
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> Data.Functor.Identity.Identity b
  {- Arity: 5,
     Strictness: <L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ st
                   @ b
                   eta2 :: Text.Parsec.Prim.State [GHC.Types.Char] st
                   eta3 :: Main.Exp
                           -> Text.Parsec.Prim.State [GHC.Types.Char] st
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b
                   eta4 :: Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b
                   eta5 :: Main.Exp
                           -> Text.Parsec.Prim.State [GHC.Types.Char] st
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b
                   eta6 :: Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b ->
                 Text.Parsec.Combinator.chainl3
                   @ [GHC.Types.Char]
                   @ st
                   @ Data.Functor.Identity.Identity
                   @ Main.Exp
                   (Main.appExp6 @ st)
                     `cast`
                   (Sym (Text.Parsec.Prim.NTCo:ParsecT[0]
                             <[GHC.Types.Char]>_R
                             <st>_R
                             <Data.Functor.Identity.Identity>_R
                             <Main.Exp>_R))
                   (Main.appExp4 @ st)
                     `cast`
                   (Sym (Text.Parsec.Prim.NTCo:ParsecT[0]
                             <[GHC.Types.Char]>_R
                             <st>_R
                             <Data.Functor.Identity.Identity>_R
                             <Main.Exp -> Main.Exp -> Main.Exp>_R))
                   @ b
                   eta2
                   eta3
                   eta4
                   eta5
                   eta6) -}
a16cda48a4f42f9210237013ec74dff1
  factor ::
    Text.Parsec.Prim.ParsecT
      [GHC.Types.Char] st Data.Functor.Identity.Identity Main.Exp
  {- Arity: 5,
     Strictness: <L,U(U,U(U,U,U),U)><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                Main.appExp12
                  `cast`
                (forall st.
                 Sym (Text.Parsec.Prim.NTCo:ParsecT[0]
                          <[GHC.Types.Char]>_R
                          <st>_R
                          <Data.Functor.Identity.Identity>_R
                          <Main.Exp>_R)) -}
03d31db096723e7ce6c7b24c7e6c3c55
  funExp ::
    Text.Parsec.Prim.ParsecT
      [GHC.Types.Char] st Data.Functor.Identity.Identity Main.Exp
  {- Arity: 5,
     Strictness: <L,U(U,U(U,U,U),U)><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,U>,
     Unfolding: InlineRule (0, True, True)
                Main.funExp1
                  `cast`
                (forall st.
                 Sym (Text.Parsec.Prim.NTCo:ParsecT[0]
                          <[GHC.Types.Char]>_R
                          <st>_R
                          <Data.Functor.Identity.Identity>_R
                          <Main.Exp>_R)) -}
1514d924611502909ea90df28593608c
  funExp1 ::
    Text.Parsec.Prim.State [GHC.Types.Char] st
    -> (Main.Exp
        -> Text.Parsec.Prim.State [GHC.Types.Char] st
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Main.Exp
        -> Text.Parsec.Prim.State [GHC.Types.Char] st
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5,
     Strictness: <L,U(U,U(U,U,U),U)><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,U>,
     Unfolding: (\ @ st
                   @ b1
                   eta :: Text.Parsec.Prim.State [GHC.Types.Char] st
                   eta1 :: Main.Exp
                           -> Text.Parsec.Prim.State [GHC.Types.Char] st
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1
                   eta2 :: Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1
                   eta3 :: Main.Exp
                           -> Text.Parsec.Prim.State [GHC.Types.Char] st
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1
                   eta4 :: Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1 ->
                 Main.andOp3
                   @ st
                   Main.funExp8
                   @ b1
                   eta
                   (\ x10 :: GHC.Base.String
                      s2 :: Text.Parsec.Prim.State [GHC.Types.Char] st[OneShot]
                      err :: Text.Parsec.Error.ParseError[OneShot] ->
                    Main.funExp2
                      @ st
                      @ b1
                      s2
                      eta1
                      eta2
                      (\ x11 :: Main.Exp
                         s3 :: Text.Parsec.Prim.State [GHC.Types.Char] st[OneShot]
                         err' :: Text.Parsec.Error.ParseError[OneShot] ->
                       eta1 x11 s3 (Text.Parsec.Error.mergeError err err'))
                      (\ err' :: Text.Parsec.Error.ParseError ->
                       eta2 (Text.Parsec.Error.mergeError err err')))
                   eta4
                   (\ x10 :: GHC.Base.String
                      s2 :: Text.Parsec.Prim.State [GHC.Types.Char] st[OneShot]
                      err :: Text.Parsec.Error.ParseError[OneShot] ->
                    Main.funExp2
                      @ st
                      @ b1
                      s2
                      eta1
                      eta2
                      (\ x11 :: Main.Exp
                         s3 :: Text.Parsec.Prim.State [GHC.Types.Char] st[OneShot]
                         err' :: Text.Parsec.Error.ParseError[OneShot] ->
                       eta3 x11 s3 (Text.Parsec.Error.mergeError err err'))
                      (\ err' :: Text.Parsec.Error.ParseError ->
                       eta4 (Text.Parsec.Error.mergeError err err')))
                   eta4) -}
51a3c63dc10508ad3fa311cd0004a679
  funExp2 ::
    Text.Parsec.Prim.State [GHC.Types.Char] st
    -> (Main.Exp
        -> Text.Parsec.Prim.State [GHC.Types.Char] st
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Main.Exp
        -> Text.Parsec.Prim.State [GHC.Types.Char] st
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5,
     Strictness: <L,U(U,U(U,U,U),U)><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Unfolding: (\ @ st
                   @ b1
                   eta :: Text.Parsec.Prim.State [GHC.Types.Char] st
                   eta1 :: Main.Exp
                           -> Text.Parsec.Prim.State [GHC.Types.Char] st
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1
                   eta2 :: Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1
                   eta3 :: Main.Exp
                           -> Text.Parsec.Prim.State [GHC.Types.Char] st
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1
                   eta4 :: Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1 ->
                 Main.andOp3
                   @ st
                   Main.funExp7
                   @ b1
                   eta
                   (\ x10 :: GHC.Base.String
                      s2 :: Text.Parsec.Prim.State [GHC.Types.Char] st[OneShot]
                      err :: Text.Parsec.Error.ParseError[OneShot] ->
                    Main.funExp3
                      @ st
                      @ b1
                      s2
                      eta1
                      eta2
                      (\ x11 :: Main.Exp
                         s3 :: Text.Parsec.Prim.State [GHC.Types.Char] st[OneShot]
                         err' :: Text.Parsec.Error.ParseError[OneShot] ->
                       eta1 x11 s3 (Text.Parsec.Error.mergeError err err'))
                      (\ err' :: Text.Parsec.Error.ParseError ->
                       eta2 (Text.Parsec.Error.mergeError err err')))
                   eta2
                   (\ x10 :: GHC.Base.String
                      s2 :: Text.Parsec.Prim.State [GHC.Types.Char] st[OneShot]
                      err :: Text.Parsec.Error.ParseError[OneShot] ->
                    Main.funExp3
                      @ st
                      @ b1
                      s2
                      eta1
                      eta2
                      (\ x11 :: Main.Exp
                         s3 :: Text.Parsec.Prim.State [GHC.Types.Char] st[OneShot]
                         err' :: Text.Parsec.Error.ParseError[OneShot] ->
                       eta3 x11 s3 (Text.Parsec.Error.mergeError err err'))
                      (\ err' :: Text.Parsec.Error.ParseError ->
                       eta4 (Text.Parsec.Error.mergeError err err')))
                   eta4) -}
09e5503b8741c6a2eb83885c4bab641b
  funExp3 ::
    Text.Parsec.Prim.State [GHC.Types.Char] st
    -> (Main.Exp
        -> Text.Parsec.Prim.State [GHC.Types.Char] st
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Main.Exp
        -> Text.Parsec.Prim.State [GHC.Types.Char] st
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5,
     Strictness: <L,U(U,U(U,U,U),U)><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Unfolding: (\ @ st
                   @ b1
                   eta :: Text.Parsec.Prim.State [GHC.Types.Char] st
                   eta1 :: Main.Exp
                           -> Text.Parsec.Prim.State [GHC.Types.Char] st
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1
                   eta2 :: Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1
                   eta3 :: Main.Exp
                           -> Text.Parsec.Prim.State [GHC.Types.Char] st
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1
                   eta4 :: Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1 ->
                 Text.Parsec.Combinator.$wa11
                   @ [GHC.Types.Char]
                   @ st
                   @ Data.Functor.Identity.Identity
                   @ [GHC.Types.Char]
                   @ GHC.Base.String
                   @ GHC.Types.Char
                   (Main.callStmt4 @ st)
                     `cast`
                   (Sym (Text.Parsec.Prim.NTCo:ParsecT[0]
                             <[GHC.Types.Char]>_R
                             <st>_R
                             <Data.Functor.Identity.Identity>_R
                             <[GHC.Types.Char]>_R))
                   (Main.funExp5 @ st)
                     `cast`
                   (Sym (Text.Parsec.Prim.NTCo:ParsecT[0]
                             <[GHC.Types.Char]>_R
                             <st>_R
                             <Data.Functor.Identity.Identity>_R
                             <GHC.Base.String>_R))
                   @ b1
                   eta
                   (\ x10 :: [[GHC.Types.Char]]
                      s2 :: Text.Parsec.Prim.State [GHC.Types.Char] st[OneShot]
                      err :: Text.Parsec.Error.ParseError[OneShot] ->
                    Main.funExp4
                      @ st
                      x10
                      @ b1
                      s2
                      eta1
                      eta2
                      (\ x11 :: Main.Exp
                         s3 :: Text.Parsec.Prim.State [GHC.Types.Char] st[OneShot]
                         err' :: Text.Parsec.Error.ParseError[OneShot] ->
                       eta1 x11 s3 (Text.Parsec.Error.mergeError err err'))
                      (\ err' :: Text.Parsec.Error.ParseError ->
                       eta2 (Text.Parsec.Error.mergeError err err')))
                   eta2
                   (\ x10 :: [[GHC.Types.Char]]
                      s2 :: Text.Parsec.Prim.State [GHC.Types.Char] st[OneShot]
                      err :: Text.Parsec.Error.ParseError[OneShot] ->
                    Main.funExp4
                      @ st
                      x10
                      @ b1
                      s2
                      eta1
                      eta2
                      (\ x11 :: Main.Exp
                         s3 :: Text.Parsec.Prim.State [GHC.Types.Char] st[OneShot]
                         err' :: Text.Parsec.Error.ParseError[OneShot] ->
                       eta3 x11 s3 (Text.Parsec.Error.mergeError err err'))
                      (\ err' :: Text.Parsec.Error.ParseError ->
                       eta4 (Text.Parsec.Error.mergeError err err')))) -}
bb8e2322135fe7c65df9a5c50cdcbca7
  funExp4 ::
    [[GHC.Types.Char]]
    -> forall b.
       Text.Parsec.Prim.State [GHC.Types.Char] st
       -> (Main.Exp
           -> Text.Parsec.Prim.State [GHC.Types.Char] st
           -> Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b)
       -> (Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b)
       -> (Main.Exp
           -> Text.Parsec.Prim.State [GHC.Types.Char] st
           -> Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b)
       -> (Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b)
       -> Data.Functor.Identity.Identity b
  {- Arity: 6,
     Strictness: <L,U><L,U(U,U(U,U,U),U)><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,C(U)> -}
fbe338177bfb45ab50a4b60dc09d721a
  funExp5 ::
    Text.Parsec.Prim.State [GHC.Types.Char] st
    -> (GHC.Base.String
        -> Text.Parsec.Prim.State [GHC.Types.Char] st
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (GHC.Base.String
        -> Text.Parsec.Prim.State [GHC.Types.Char] st
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> Data.Functor.Identity.Identity b
  {- Arity: 5,
     Unfolding: (\ @ st -> Main.andOp3 @ st Main.funExp6) -}
07f4fdf3bf153bda13712c37098e69b6
  funExp6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# ","#) -}
eaf8630d25f74c65a4cfaa74284f6280
  funExp7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "["#) -}
43cf6ec81e9dadf70c48189cdeecfa77
  funExp8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "fn"#) -}
751107af109b6159fb8e9bc78e14b767
  ifExp ::
    Text.Parsec.Prim.ParsecT
      [GHC.Types.Char] st Data.Functor.Identity.Identity Main.Exp
  {- Arity: 5,
     Strictness: <L,U(U,U(U,U,U),U)><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,U>,
     Unfolding: InlineRule (0, True, True)
                Main.ifExp1
                  `cast`
                (forall st.
                 Sym (Text.Parsec.Prim.NTCo:ParsecT[0]
                          <[GHC.Types.Char]>_R
                          <st>_R
                          <Data.Functor.Identity.Identity>_R
                          <Main.Exp>_R)) -}
7ef682e1b22c15e96849e4e774f337dd
  ifExp1 ::
    Text.Parsec.Prim.State [GHC.Types.Char] st
    -> (Main.Exp
        -> Text.Parsec.Prim.State [GHC.Types.Char] st
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Main.Exp
        -> Text.Parsec.Prim.State [GHC.Types.Char] st
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5,
     Strictness: <L,U(U,U(U,U,U),U)><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,U>,
     Unfolding: (\ @ st
                   @ b1
                   eta :: Text.Parsec.Prim.State [GHC.Types.Char] st
                   eta1 :: Main.Exp
                           -> Text.Parsec.Prim.State [GHC.Types.Char] st
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1
                   eta2 :: Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1
                   eta3 :: Main.Exp
                           -> Text.Parsec.Prim.State [GHC.Types.Char] st
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1
                   eta4 :: Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1 ->
                 Main.andOp3
                   @ st
                   Main.ifExp4
                   @ b1
                   eta
                   (\ x10 :: GHC.Base.String
                      s2 :: Text.Parsec.Prim.State [GHC.Types.Char] st[OneShot]
                      err :: Text.Parsec.Error.ParseError[OneShot] ->
                    Main.ifExp2
                      @ st
                      @ b1
                      s2
                      eta1
                      eta2
                      (\ x11 :: Main.Exp
                         s3 :: Text.Parsec.Prim.State [GHC.Types.Char] st[OneShot]
                         err' :: Text.Parsec.Error.ParseError[OneShot] ->
                       eta1 x11 s3 (Text.Parsec.Error.mergeError err err'))
                      (\ err' :: Text.Parsec.Error.ParseError ->
                       eta2 (Text.Parsec.Error.mergeError err err')))
                   eta4
                   (\ x10 :: GHC.Base.String
                      s2 :: Text.Parsec.Prim.State [GHC.Types.Char] st[OneShot]
                      err :: Text.Parsec.Error.ParseError[OneShot] ->
                    Main.ifExp2
                      @ st
                      @ b1
                      s2
                      eta1
                      eta2
                      (\ x11 :: Main.Exp
                         s3 :: Text.Parsec.Prim.State [GHC.Types.Char] st[OneShot]
                         err' :: Text.Parsec.Error.ParseError[OneShot] ->
                       eta3 x11 s3 (Text.Parsec.Error.mergeError err err'))
                      (\ err' :: Text.Parsec.Error.ParseError ->
                       eta4 (Text.Parsec.Error.mergeError err err')))
                   eta4) -}
1184a3e0b25b11cf1e7335e895fc26e3
  ifExp2 ::
    Text.Parsec.Prim.State [GHC.Types.Char] st
    -> (Main.Exp
        -> Text.Parsec.Prim.State [GHC.Types.Char] st
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Main.Exp
        -> Text.Parsec.Prim.State [GHC.Types.Char] st
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5,
     Strictness: <L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,U>,
     Unfolding: (\ @ st
                   @ b1
                   eta :: Text.Parsec.Prim.State [GHC.Types.Char] st
                   eta1 :: Main.Exp
                           -> Text.Parsec.Prim.State [GHC.Types.Char] st
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1
                   eta2 :: Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1
                   eta3 :: Main.Exp
                           -> Text.Parsec.Prim.State [GHC.Types.Char] st
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1
                   eta4 :: Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1 ->
                 Text.Parsec.Combinator.chainl3
                   @ [GHC.Types.Char]
                   @ st
                   @ Data.Functor.Identity.Identity
                   @ Main.Exp
                   (Main.appExp6 @ st)
                     `cast`
                   (Sym (Text.Parsec.Prim.NTCo:ParsecT[0]
                             <[GHC.Types.Char]>_R
                             <st>_R
                             <Data.Functor.Identity.Identity>_R
                             <Main.Exp>_R))
                   (Main.appExp4 @ st)
                     `cast`
                   (Sym (Text.Parsec.Prim.NTCo:ParsecT[0]
                             <[GHC.Types.Char]>_R
                             <st>_R
                             <Data.Functor.Identity.Identity>_R
                             <Main.Exp -> Main.Exp -> Main.Exp>_R))
                   @ b1
                   eta
                   (\ x10 :: Main.Exp
                      s2 :: Text.Parsec.Prim.State [GHC.Types.Char] st[OneShot]
                      err :: Text.Parsec.Error.ParseError[OneShot] ->
                    Main.ifExp3
                      @ st
                      x10
                      @ b1
                      s2
                      eta1
                      eta2
                      (\ x11 :: Main.Exp
                         s3 :: Text.Parsec.Prim.State [GHC.Types.Char] st[OneShot]
                         err' :: Text.Parsec.Error.ParseError[OneShot] ->
                       eta1 x11 s3 (Text.Parsec.Error.mergeError err err'))
                      (\ err' :: Text.Parsec.Error.ParseError ->
                       eta2 (Text.Parsec.Error.mergeError err err')))
                   eta2
                   (\ x10 :: Main.Exp
                      s2 :: Text.Parsec.Prim.State [GHC.Types.Char] st[OneShot]
                      err :: Text.Parsec.Error.ParseError[OneShot] ->
                    Main.ifExp3
                      @ st
                      x10
                      @ b1
                      s2
                      eta1
                      eta2
                      (\ x11 :: Main.Exp
                         s3 :: Text.Parsec.Prim.State [GHC.Types.Char] st[OneShot]
                         err' :: Text.Parsec.Error.ParseError[OneShot] ->
                       eta3 x11 s3 (Text.Parsec.Error.mergeError err err'))
                      (\ err' :: Text.Parsec.Error.ParseError ->
                       eta4 (Text.Parsec.Error.mergeError err err')))
                   eta4) -}
1f7651c4537a0dea5330d106f3a58d0e
  ifExp3 ::
    Main.Exp
    -> forall b.
       Text.Parsec.Prim.State [GHC.Types.Char] st
       -> (Main.Exp
           -> Text.Parsec.Prim.State [GHC.Types.Char] st
           -> Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b)
       -> (Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b)
       -> (Main.Exp
           -> Text.Parsec.Prim.State [GHC.Types.Char] st
           -> Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b)
       -> (Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b)
       -> Data.Functor.Identity.Identity b
  {- Arity: 6,
     Strictness: <L,U><L,U(U,U(U,U,U),U)><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,C(U)> -}
39e62cd390dd11ef48834477a2c79850
  ifExp4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "if"#) -}
e01aa2255c4d825599442c6df5941157
  ifStmt ::
    Text.Parsec.Prim.ParsecT
      [GHC.Types.Char] st Data.Functor.Identity.Identity Main.Stmt
  {- Arity: 5,
     Strictness: <L,U(U,U(U,U,U),U)><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,U>,
     Unfolding: InlineRule (0, True, True)
                Main.ifStmt1
                  `cast`
                (forall st.
                 Sym (Text.Parsec.Prim.NTCo:ParsecT[0]
                          <[GHC.Types.Char]>_R
                          <st>_R
                          <Data.Functor.Identity.Identity>_R
                          <Main.Stmt>_R)) -}
b197824493545a8e936c611684ca4b91
  ifStmt1 ::
    Text.Parsec.Prim.State [GHC.Types.Char] st
    -> (Main.Stmt
        -> Text.Parsec.Prim.State [GHC.Types.Char] st
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Main.Stmt
        -> Text.Parsec.Prim.State [GHC.Types.Char] st
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5,
     Strictness: <L,U(U,U(U,U,U),U)><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,U>,
     Unfolding: (\ @ st
                   @ b1
                   eta :: Text.Parsec.Prim.State [GHC.Types.Char] st
                   eta1 :: Main.Stmt
                           -> Text.Parsec.Prim.State [GHC.Types.Char] st
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1
                   eta2 :: Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1
                   eta3 :: Main.Stmt
                           -> Text.Parsec.Prim.State [GHC.Types.Char] st
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1
                   eta4 :: Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1 ->
                 Main.andOp3
                   @ st
                   Main.ifExp4
                   @ b1
                   eta
                   (\ x10 :: GHC.Base.String
                      s2 :: Text.Parsec.Prim.State [GHC.Types.Char] st[OneShot]
                      err :: Text.Parsec.Error.ParseError[OneShot] ->
                    Main.ifStmt2
                      @ st
                      @ b1
                      s2
                      eta1
                      eta2
                      (\ x11 :: Main.Stmt
                         s3 :: Text.Parsec.Prim.State [GHC.Types.Char] st[OneShot]
                         err' :: Text.Parsec.Error.ParseError[OneShot] ->
                       eta1 x11 s3 (Text.Parsec.Error.mergeError err err'))
                      (\ err' :: Text.Parsec.Error.ParseError ->
                       eta2 (Text.Parsec.Error.mergeError err err')))
                   eta4
                   (\ x10 :: GHC.Base.String
                      s2 :: Text.Parsec.Prim.State [GHC.Types.Char] st[OneShot]
                      err :: Text.Parsec.Error.ParseError[OneShot] ->
                    Main.ifStmt2
                      @ st
                      @ b1
                      s2
                      eta1
                      eta2
                      (\ x11 :: Main.Stmt
                         s3 :: Text.Parsec.Prim.State [GHC.Types.Char] st[OneShot]
                         err' :: Text.Parsec.Error.ParseError[OneShot] ->
                       eta3 x11 s3 (Text.Parsec.Error.mergeError err err'))
                      (\ err' :: Text.Parsec.Error.ParseError ->
                       eta4 (Text.Parsec.Error.mergeError err err')))
                   eta4) -}
aa5c904cbc442aa0e526a77e79411d90
  ifStmt2 ::
    Text.Parsec.Prim.State [GHC.Types.Char] st
    -> (Main.Stmt
        -> Text.Parsec.Prim.State [GHC.Types.Char] st
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Main.Stmt
        -> Text.Parsec.Prim.State [GHC.Types.Char] st
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5,
     Strictness: <L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,U>,
     Unfolding: (\ @ st
                   @ b1
                   eta :: Text.Parsec.Prim.State [GHC.Types.Char] st
                   eta1 :: Main.Stmt
                           -> Text.Parsec.Prim.State [GHC.Types.Char] st
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1
                   eta2 :: Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1
                   eta3 :: Main.Stmt
                           -> Text.Parsec.Prim.State [GHC.Types.Char] st
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1
                   eta4 :: Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1 ->
                 Text.Parsec.Combinator.chainl3
                   @ [GHC.Types.Char]
                   @ st
                   @ Data.Functor.Identity.Identity
                   @ Main.Exp
                   (Main.appExp6 @ st)
                     `cast`
                   (Sym (Text.Parsec.Prim.NTCo:ParsecT[0]
                             <[GHC.Types.Char]>_R
                             <st>_R
                             <Data.Functor.Identity.Identity>_R
                             <Main.Exp>_R))
                   (Main.appExp4 @ st)
                     `cast`
                   (Sym (Text.Parsec.Prim.NTCo:ParsecT[0]
                             <[GHC.Types.Char]>_R
                             <st>_R
                             <Data.Functor.Identity.Identity>_R
                             <Main.Exp -> Main.Exp -> Main.Exp>_R))
                   @ b1
                   eta
                   (\ x10 :: Main.Exp
                      s2 :: Text.Parsec.Prim.State [GHC.Types.Char] st[OneShot]
                      err :: Text.Parsec.Error.ParseError[OneShot] ->
                    Main.ifStmt3
                      @ st
                      x10
                      @ b1
                      s2
                      eta1
                      eta2
                      (\ x11 :: Main.Stmt
                         s3 :: Text.Parsec.Prim.State [GHC.Types.Char] st[OneShot]
                         err' :: Text.Parsec.Error.ParseError[OneShot] ->
                       eta1 x11 s3 (Text.Parsec.Error.mergeError err err'))
                      (\ err' :: Text.Parsec.Error.ParseError ->
                       eta2 (Text.Parsec.Error.mergeError err err')))
                   eta2
                   (\ x10 :: Main.Exp
                      s2 :: Text.Parsec.Prim.State [GHC.Types.Char] st[OneShot]
                      err :: Text.Parsec.Error.ParseError[OneShot] ->
                    Main.ifStmt3
                      @ st
                      x10
                      @ b1
                      s2
                      eta1
                      eta2
                      (\ x11 :: Main.Stmt
                         s3 :: Text.Parsec.Prim.State [GHC.Types.Char] st[OneShot]
                         err' :: Text.Parsec.Error.ParseError[OneShot] ->
                       eta3 x11 s3 (Text.Parsec.Error.mergeError err err'))
                      (\ err' :: Text.Parsec.Error.ParseError ->
                       eta4 (Text.Parsec.Error.mergeError err err')))
                   eta4) -}
ca2ca8d387afbaa051568ffcfb2ae728
  ifStmt3 ::
    Main.Exp
    -> forall b.
       Text.Parsec.Prim.State [GHC.Types.Char] st
       -> (Main.Stmt
           -> Text.Parsec.Prim.State [GHC.Types.Char] st
           -> Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b)
       -> (Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b)
       -> (Main.Stmt
           -> Text.Parsec.Prim.State [GHC.Types.Char] st
           -> Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b)
       -> (Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b)
       -> Data.Functor.Identity.Identity b
  {- Arity: 6,
     Strictness: <L,U><L,U(U,U(U,U,U),U)><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,C(U)> -}
4f03e520ea4b98e1ab32cdf86edaeda0
  int ::
    Text.Parsec.Prim.Stream s m GHC.Types.Char =>
    Text.Parsec.Prim.ParsecT s u m GHC.Types.Int
  {- Arity: 6,
     Strictness: <S(S(LC(C(S))LLL)L),U(U(A,C(C1(U)),A,A,A),C(U))><L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                Main.int2
                  `cast`
                (forall s u (m :: * -> *).
                 <Text.Parsec.Prim.Stream s m GHC.Types.Char>_R
                 ->_R Sym (Text.Parsec.Prim.NTCo:ParsecT[0]
                               <s>_R <u>_R <m>_R <GHC.Types.Int>_R)) -}
8e1f8a4b1ca007edc7e7679e3a62a041
  int1 ::
    Text.Parsec.Prim.State [GHC.Types.Char] u
    -> (GHC.Types.Int
        -> Text.Parsec.Prim.State [GHC.Types.Char] u
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (GHC.Types.Int
        -> Text.Parsec.Prim.State [GHC.Types.Char] u
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5,
     Strictness: <L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,C(U)> -}
cda3da44f396324d49f609f0822ee5a3
  int2 ::
    Text.Parsec.Prim.Stream s m GHC.Types.Char =>
    forall b.
    Text.Parsec.Prim.State s u
    -> (GHC.Types.Int
        -> Text.Parsec.Prim.State s u
        -> Text.Parsec.Error.ParseError
        -> m b)
    -> (Text.Parsec.Error.ParseError -> m b)
    -> (GHC.Types.Int
        -> Text.Parsec.Prim.State s u
        -> Text.Parsec.Error.ParseError
        -> m b)
    -> (Text.Parsec.Error.ParseError -> m b)
    -> m b
  {- Arity: 6,
     Strictness: <S(S(LC(C(S))LLL)L),U(U(A,C(C1(U)),A,A,A),C(U))><L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,C(U)> -}
1c18eb25e9baee05829e5b27506236f9
  intExp ::
    Text.Parsec.Prim.Stream s m GHC.Types.Char =>
    Text.Parsec.Prim.ParsecT s u m Main.Exp
  {- Arity: 6,
     Strictness: <S(S(LC(C(S))LLL)L),U(U(A,C(C1(U)),A,A,A),C(U))><L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                Main.intExp2
                  `cast`
                (forall s u (m :: * -> *).
                 <Text.Parsec.Prim.Stream s m GHC.Types.Char>_R
                 ->_R Sym (Text.Parsec.Prim.NTCo:ParsecT[0]
                               <s>_R <u>_R <m>_R <Main.Exp>_R)) -}
1fa3feed2bbc70db2ae54a90d3ba91aa
  intExp1 ::
    Text.Parsec.Prim.State [GHC.Types.Char] u
    -> (Main.Exp
        -> Text.Parsec.Prim.State [GHC.Types.Char] u
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Main.Exp
        -> Text.Parsec.Prim.State [GHC.Types.Char] u
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5,
     Strictness: <L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Unfolding: (\ @ u
                   @ b1
                   eta :: Text.Parsec.Prim.State [GHC.Types.Char] u
                   eta1 :: Main.Exp
                           -> Text.Parsec.Prim.State [GHC.Types.Char] u
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1
                   eta2 :: Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1
                   eta3 :: Main.Exp
                           -> Text.Parsec.Prim.State [GHC.Types.Char] u
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1
                   eta4 :: Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1 ->
                 Main.int1
                   @ u
                   @ b1
                   eta
                   (\ x10 :: GHC.Types.Int
                      s2 :: Text.Parsec.Prim.State [GHC.Types.Char] u[OneShot]
                      err :: Text.Parsec.Error.ParseError[OneShot] ->
                    eta1
                      (Main.IntExp x10)
                      s2
                      (case s2 of wild { Text.Parsec.Prim.State ds3 ds4 ds5 ->
                       case ds4 of ww10 { Text.Parsec.Pos.SourcePos ww11 ww12 ww13 ->
                       case err of ww { Text.Parsec.Error.ParseError ww1 ww2 ->
                       case ww1 of ww3 { Text.Parsec.Pos.SourcePos ww4 ww5 ww6 ->
                       case Text.Parsec.Error.$wmergeError
                              ww4
                              ww5
                              ww6
                              ww2
                              ww11
                              ww12
                              ww13
                              (GHC.Types.[]
                                 @ Text.Parsec.Error.Message) of ww14 { (#,#) ww15 ww16 ->
                       Text.Parsec.Error.ParseError ww15 ww16 } } } } }))
                   eta2
                   (\ x10 :: GHC.Types.Int
                      s2 :: Text.Parsec.Prim.State [GHC.Types.Char] u[OneShot]
                      err :: Text.Parsec.Error.ParseError[OneShot] ->
                    eta3
                      (Main.IntExp x10)
                      s2
                      (case s2 of wild { Text.Parsec.Prim.State ds3 ds4 ds5 ->
                       case ds4 of ww10 { Text.Parsec.Pos.SourcePos ww11 ww12 ww13 ->
                       case err of ww { Text.Parsec.Error.ParseError ww1 ww2 ->
                       case ww1 of ww3 { Text.Parsec.Pos.SourcePos ww4 ww5 ww6 ->
                       case Text.Parsec.Error.$wmergeError
                              ww4
                              ww5
                              ww6
                              ww2
                              ww11
                              ww12
                              ww13
                              (GHC.Types.[]
                                 @ Text.Parsec.Error.Message) of ww14 { (#,#) ww15 ww16 ->
                       Text.Parsec.Error.ParseError ww15 ww16 } } } } }))
                   eta4) -}
74a1487f90b756ff5ee639ca9e85c570
  intExp2 ::
    Text.Parsec.Prim.Stream s m GHC.Types.Char =>
    forall b.
    Text.Parsec.Prim.State s u
    -> (Main.Exp
        -> Text.Parsec.Prim.State s u
        -> Text.Parsec.Error.ParseError
        -> m b)
    -> (Text.Parsec.Error.ParseError -> m b)
    -> (Main.Exp
        -> Text.Parsec.Prim.State s u
        -> Text.Parsec.Error.ParseError
        -> m b)
    -> (Text.Parsec.Error.ParseError -> m b)
    -> m b
  {- Arity: 6,
     Strictness: <S(S(LC(C(S))LLL)L),U(U(A,C(C1(U)),A,A,A),C(U))><L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Unfolding: (\ @ s
                   @ u
                   @ (m :: * -> *)
                   $dStream :: Text.Parsec.Prim.Stream s m GHC.Types.Char
                   @ b
                   eta :: Text.Parsec.Prim.State s u
                   eta1 :: Main.Exp
                           -> Text.Parsec.Prim.State s u
                           -> Text.Parsec.Error.ParseError
                           -> m b
                   eta2 :: Text.Parsec.Error.ParseError -> m b
                   eta3 :: Main.Exp
                           -> Text.Parsec.Prim.State s u
                           -> Text.Parsec.Error.ParseError
                           -> m b
                   eta4 :: Text.Parsec.Error.ParseError -> m b ->
                 Main.int2
                   @ s
                   @ u
                   @ m
                   $dStream
                   @ b
                   eta
                   (\ x10 :: GHC.Types.Int
                      s2 :: Text.Parsec.Prim.State s u[OneShot]
                      err :: Text.Parsec.Error.ParseError[OneShot] ->
                    eta1
                      (Main.IntExp x10)
                      s2
                      (case s2 of wild { Text.Parsec.Prim.State ds3 ds4 ds5 ->
                       case ds4 of ww10 { Text.Parsec.Pos.SourcePos ww11 ww12 ww13 ->
                       case err of ww { Text.Parsec.Error.ParseError ww1 ww2 ->
                       case ww1 of ww3 { Text.Parsec.Pos.SourcePos ww4 ww5 ww6 ->
                       case Text.Parsec.Error.$wmergeError
                              ww4
                              ww5
                              ww6
                              ww2
                              ww11
                              ww12
                              ww13
                              (GHC.Types.[]
                                 @ Text.Parsec.Error.Message) of ww14 { (#,#) ww15 ww16 ->
                       Text.Parsec.Error.ParseError ww15 ww16 } } } } }))
                   eta2
                   (\ x10 :: GHC.Types.Int
                      s2 :: Text.Parsec.Prim.State s u[OneShot]
                      err :: Text.Parsec.Error.ParseError[OneShot] ->
                    eta3
                      (Main.IntExp x10)
                      s2
                      (case s2 of wild { Text.Parsec.Prim.State ds3 ds4 ds5 ->
                       case ds4 of ww10 { Text.Parsec.Pos.SourcePos ww11 ww12 ww13 ->
                       case err of ww { Text.Parsec.Error.ParseError ww1 ww2 ->
                       case ww1 of ww3 { Text.Parsec.Pos.SourcePos ww4 ww5 ww6 ->
                       case Text.Parsec.Error.$wmergeError
                              ww4
                              ww5
                              ww6
                              ww2
                              ww11
                              ww12
                              ww13
                              (GHC.Types.[]
                                 @ Text.Parsec.Error.Message) of ww14 { (#,#) ww15 ww16 ->
                       Text.Parsec.Error.ParseError ww15 ww16 } } } } }))
                   eta4) -}
9dbaf3142e1477ad04d4ee1d254b11c3
  intOps ::
    Data.HashMap.Base.HashMap
      GHC.Base.String (GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Int)
  {- Unfolding: (case Main.$sunsafeInsert
                        @ (GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Int)
                        Main.intOps4
                        GHC.Num.$fNumInt_$c+
                        (Data.HashMap.Base.Empty
                           @ GHC.Base.String
                           @ (GHC.Types.Int
                              -> GHC.Types.Int -> GHC.Types.Int)) of z { DEFAULT ->
                 case Main.$sunsafeInsert
                        @ (GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Int)
                        Main.intOps3
                        GHC.Num.$fNumInt_$c-
                        z of z1 { DEFAULT ->
                 case Main.$sunsafeInsert
                        @ (GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Int)
                        Main.intOps2
                        GHC.Num.$fNumInt_$c*
                        z1 of z2 { DEFAULT ->
                 Main.$sunsafeInsert
                   @ (GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Int)
                   Main.intOps1
                   GHC.Real.$fIntegralInt_$cdiv
                   z2 } } }) -}
530696d63d22bd7deebf83551cebe4e1
  intOps1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "/"#) -}
2023f93a1247c14f46a9d0ecbcebdce5
  intOps2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "*"#) -}
d9f00844ccff720365380f768b1bdff0
  intOps3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "-"#) -}
0a0b9e2844c827c699e418377f3ca4cd
  intOps4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "+"#) -}
1009e2a189e079db1117db9b0b720ee6
  letExp ::
    Text.Parsec.Prim.ParsecT
      [GHC.Types.Char] st Data.Functor.Identity.Identity Main.Exp
  {- Arity: 5,
     Strictness: <L,U(U,U(U,U,U),U)><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,U>,
     Unfolding: InlineRule (0, True, True)
                Main.letExp1
                  `cast`
                (forall st.
                 Sym (Text.Parsec.Prim.NTCo:ParsecT[0]
                          <[GHC.Types.Char]>_R
                          <st>_R
                          <Data.Functor.Identity.Identity>_R
                          <Main.Exp>_R)) -}
9a76804fa943aa198db08a872243c27e
  letExp1 ::
    Text.Parsec.Prim.State [GHC.Types.Char] st
    -> (Main.Exp
        -> Text.Parsec.Prim.State [GHC.Types.Char] st
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Main.Exp
        -> Text.Parsec.Prim.State [GHC.Types.Char] st
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5,
     Strictness: <L,U(U,U(U,U,U),U)><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,U>,
     Unfolding: (\ @ st
                   @ b1
                   eta :: Text.Parsec.Prim.State [GHC.Types.Char] st
                   eta1 :: Main.Exp
                           -> Text.Parsec.Prim.State [GHC.Types.Char] st
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1
                   eta2 :: Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1
                   eta3 :: Main.Exp
                           -> Text.Parsec.Prim.State [GHC.Types.Char] st
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1
                   eta4 :: Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1 ->
                 Main.andOp3
                   @ st
                   Main.letExp9
                   @ b1
                   eta
                   (\ x10 :: GHC.Base.String
                      s2 :: Text.Parsec.Prim.State [GHC.Types.Char] st[OneShot]
                      err :: Text.Parsec.Error.ParseError[OneShot] ->
                    Main.letExp2
                      @ st
                      @ b1
                      s2
                      eta1
                      eta2
                      (\ x11 :: Main.Exp
                         s3 :: Text.Parsec.Prim.State [GHC.Types.Char] st[OneShot]
                         err' :: Text.Parsec.Error.ParseError[OneShot] ->
                       eta1 x11 s3 (Text.Parsec.Error.mergeError err err'))
                      (\ err' :: Text.Parsec.Error.ParseError ->
                       eta2 (Text.Parsec.Error.mergeError err err')))
                   eta4
                   (\ x10 :: GHC.Base.String
                      s2 :: Text.Parsec.Prim.State [GHC.Types.Char] st[OneShot]
                      err :: Text.Parsec.Error.ParseError[OneShot] ->
                    Main.letExp2
                      @ st
                      @ b1
                      s2
                      eta1
                      eta2
                      (\ x11 :: Main.Exp
                         s3 :: Text.Parsec.Prim.State [GHC.Types.Char] st[OneShot]
                         err' :: Text.Parsec.Error.ParseError[OneShot] ->
                       eta3 x11 s3 (Text.Parsec.Error.mergeError err err'))
                      (\ err' :: Text.Parsec.Error.ParseError ->
                       eta4 (Text.Parsec.Error.mergeError err err')))
                   eta4) -}
7d70fb4445fc0a5cd30f0970ca1af095
  letExp2 ::
    Text.Parsec.Prim.State [GHC.Types.Char] st
    -> (Main.Exp
        -> Text.Parsec.Prim.State [GHC.Types.Char] st
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Main.Exp
        -> Text.Parsec.Prim.State [GHC.Types.Char] st
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5,
     Strictness: <L,U(U,U(U,U,U),U)><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Unfolding: (\ @ st
                   @ b1
                   eta :: Text.Parsec.Prim.State [GHC.Types.Char] st
                   eta1 :: Main.Exp
                           -> Text.Parsec.Prim.State [GHC.Types.Char] st
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1
                   eta2 :: Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1
                   eta3 :: Main.Exp
                           -> Text.Parsec.Prim.State [GHC.Types.Char] st
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1
                   eta4 :: Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1 ->
                 Main.andOp3
                   @ st
                   Main.funExp7
                   @ b1
                   eta
                   (\ x10 :: GHC.Base.String
                      s2 :: Text.Parsec.Prim.State [GHC.Types.Char] st[OneShot]
                      err :: Text.Parsec.Error.ParseError[OneShot] ->
                    Main.letExp3
                      @ st
                      @ b1
                      s2
                      eta1
                      eta2
                      (\ x11 :: Main.Exp
                         s3 :: Text.Parsec.Prim.State [GHC.Types.Char] st[OneShot]
                         err' :: Text.Parsec.Error.ParseError[OneShot] ->
                       eta1 x11 s3 (Text.Parsec.Error.mergeError err err'))
                      (\ err' :: Text.Parsec.Error.ParseError ->
                       eta2 (Text.Parsec.Error.mergeError err err')))
                   eta2
                   (\ x10 :: GHC.Base.String
                      s2 :: Text.Parsec.Prim.State [GHC.Types.Char] st[OneShot]
                      err :: Text.Parsec.Error.ParseError[OneShot] ->
                    Main.letExp3
                      @ st
                      @ b1
                      s2
                      eta1
                      eta2
                      (\ x11 :: Main.Exp
                         s3 :: Text.Parsec.Prim.State [GHC.Types.Char] st[OneShot]
                         err' :: Text.Parsec.Error.ParseError[OneShot] ->
                       eta3 x11 s3 (Text.Parsec.Error.mergeError err err'))
                      (\ err' :: Text.Parsec.Error.ParseError ->
                       eta4 (Text.Parsec.Error.mergeError err err')))
                   eta4) -}
21339fae8905007c6950cdaf322d9638
  letExp3 ::
    Text.Parsec.Prim.State [GHC.Types.Char] st
    -> (Main.Exp
        -> Text.Parsec.Prim.State [GHC.Types.Char] st
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Main.Exp
        -> Text.Parsec.Prim.State [GHC.Types.Char] st
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5,
     Strictness: <L,U(U,U(U,U,U),U)><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Unfolding: (\ @ st
                   @ b1
                   eta :: Text.Parsec.Prim.State [GHC.Types.Char] st
                   eta1 :: Main.Exp
                           -> Text.Parsec.Prim.State [GHC.Types.Char] st
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1
                   eta2 :: Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1
                   eta3 :: Main.Exp
                           -> Text.Parsec.Prim.State [GHC.Types.Char] st
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1
                   eta4 :: Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1 ->
                 Text.Parsec.Combinator.$wa11
                   @ [GHC.Types.Char]
                   @ st
                   @ Data.Functor.Identity.Identity
                   @ ([GHC.Types.Char], Main.Exp)
                   @ GHC.Base.String
                   @ GHC.Types.Char
                   (Main.letExp7 @ st)
                     `cast`
                   (Sym (Text.Parsec.Prim.NTCo:ParsecT[0]
                             <[GHC.Types.Char]>_R
                             <st>_R
                             <Data.Functor.Identity.Identity>_R
                             <([GHC.Types.Char], Main.Exp)>_R))
                   (Main.letExp5 @ st)
                     `cast`
                   (Sym (Text.Parsec.Prim.NTCo:ParsecT[0]
                             <[GHC.Types.Char]>_R
                             <st>_R
                             <Data.Functor.Identity.Identity>_R
                             <GHC.Base.String>_R))
                   @ b1
                   eta
                   (\ x10 :: [([GHC.Types.Char], Main.Exp)]
                      s2 :: Text.Parsec.Prim.State [GHC.Types.Char] st[OneShot]
                      err :: Text.Parsec.Error.ParseError[OneShot] ->
                    Main.letExp4
                      @ st
                      x10
                      @ b1
                      s2
                      eta1
                      eta2
                      (\ x11 :: Main.Exp
                         s3 :: Text.Parsec.Prim.State [GHC.Types.Char] st[OneShot]
                         err' :: Text.Parsec.Error.ParseError[OneShot] ->
                       eta1 x11 s3 (Text.Parsec.Error.mergeError err err'))
                      (\ err' :: Text.Parsec.Error.ParseError ->
                       eta2 (Text.Parsec.Error.mergeError err err')))
                   eta2
                   (\ x10 :: [([GHC.Types.Char], Main.Exp)]
                      s2 :: Text.Parsec.Prim.State [GHC.Types.Char] st[OneShot]
                      err :: Text.Parsec.Error.ParseError[OneShot] ->
                    Main.letExp4
                      @ st
                      x10
                      @ b1
                      s2
                      eta1
                      eta2
                      (\ x11 :: Main.Exp
                         s3 :: Text.Parsec.Prim.State [GHC.Types.Char] st[OneShot]
                         err' :: Text.Parsec.Error.ParseError[OneShot] ->
                       eta3 x11 s3 (Text.Parsec.Error.mergeError err err'))
                      (\ err' :: Text.Parsec.Error.ParseError ->
                       eta4 (Text.Parsec.Error.mergeError err err')))) -}
d8fbbe79d4ddce3ee35165dcc573222e
  letExp4 ::
    [([GHC.Types.Char], Main.Exp)]
    -> forall b.
       Text.Parsec.Prim.State [GHC.Types.Char] st
       -> (Main.Exp
           -> Text.Parsec.Prim.State [GHC.Types.Char] st
           -> Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b)
       -> (Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b)
       -> (Main.Exp
           -> Text.Parsec.Prim.State [GHC.Types.Char] st
           -> Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b)
       -> (Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b)
       -> Data.Functor.Identity.Identity b
  {- Arity: 6,
     Strictness: <L,U><L,U(U,U(U,U,U),U)><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,C(U)> -}
7987ebae51b924f1058dc5f9ab41014f
  letExp5 ::
    Text.Parsec.Prim.State [GHC.Types.Char] st
    -> (GHC.Base.String
        -> Text.Parsec.Prim.State [GHC.Types.Char] st
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (GHC.Base.String
        -> Text.Parsec.Prim.State [GHC.Types.Char] st
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> Data.Functor.Identity.Identity b
  {- Arity: 5,
     Unfolding: (\ @ st -> Main.andOp3 @ st Main.letExp6) -}
2fb79c466c05a913635447a9d8557230
  letExp6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# ";"#) -}
9a73140d432f0d97af1ae689c73f4116
  letExp7 ::
    Text.Parsec.Prim.State [GHC.Types.Char] st
    -> (([GHC.Types.Char], Main.Exp)
        -> Text.Parsec.Prim.State [GHC.Types.Char] st
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (([GHC.Types.Char], Main.Exp)
        -> Text.Parsec.Prim.State [GHC.Types.Char] st
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5,
     Strictness: <L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Unfolding: (\ @ st
                   @ b1
                   eta :: Text.Parsec.Prim.State [GHC.Types.Char] st
                   eta1 :: ([GHC.Types.Char], Main.Exp)
                           -> Text.Parsec.Prim.State [GHC.Types.Char] st
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1
                   eta2 :: Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1
                   eta3 :: ([GHC.Types.Char], Main.Exp)
                           -> Text.Parsec.Prim.State [GHC.Types.Char] st
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1
                   eta4 :: Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1 ->
                 Main.callStmt4
                   @ st
                   @ b1
                   eta
                   (\ x10 :: [GHC.Types.Char]
                      s2 :: Text.Parsec.Prim.State [GHC.Types.Char] st[OneShot]
                      err :: Text.Parsec.Error.ParseError[OneShot] ->
                    Main.letExp8
                      @ st
                      x10
                      @ b1
                      s2
                      eta1
                      eta2
                      (\ x11 :: ([GHC.Types.Char], Main.Exp)
                         s3 :: Text.Parsec.Prim.State [GHC.Types.Char] st[OneShot]
                         err' :: Text.Parsec.Error.ParseError[OneShot] ->
                       eta1 x11 s3 (Text.Parsec.Error.mergeError err err'))
                      (\ err' :: Text.Parsec.Error.ParseError ->
                       eta2 (Text.Parsec.Error.mergeError err err')))
                   eta2
                   (\ x10 :: [GHC.Types.Char]
                      s2 :: Text.Parsec.Prim.State [GHC.Types.Char] st[OneShot]
                      err :: Text.Parsec.Error.ParseError[OneShot] ->
                    Main.letExp8
                      @ st
                      x10
                      @ b1
                      s2
                      eta1
                      eta2
                      (\ x11 :: ([GHC.Types.Char], Main.Exp)
                         s3 :: Text.Parsec.Prim.State [GHC.Types.Char] st[OneShot]
                         err' :: Text.Parsec.Error.ParseError[OneShot] ->
                       eta3 x11 s3 (Text.Parsec.Error.mergeError err err'))
                      (\ err' :: Text.Parsec.Error.ParseError ->
                       eta4 (Text.Parsec.Error.mergeError err err')))
                   eta4) -}
fc5162eac863568bec5175367f84fe3c
  letExp8 ::
    [GHC.Types.Char]
    -> forall b.
       Text.Parsec.Prim.State [GHC.Types.Char] st
       -> (([GHC.Types.Char], Main.Exp)
           -> Text.Parsec.Prim.State [GHC.Types.Char] st
           -> Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b)
       -> (Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b)
       -> (([GHC.Types.Char], Main.Exp)
           -> Text.Parsec.Prim.State [GHC.Types.Char] st
           -> Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b)
       -> (Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b)
       -> Data.Functor.Identity.Identity b
  {- Arity: 6,
     Strictness: <L,U><L,U(U,U(U,U,U),U)><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,C(U)> -}
762b52f0ac03fc011baa6fcbc29b38eb
  letExp9 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "let"#) -}
2721169b539713b0e46cc41c183683dd
  liftBoolOp ::
    (GHC.Types.Bool -> GHC.Types.Bool -> GHC.Types.Bool)
    -> Main.Val -> Main.Val -> Main.Val
  {- Arity: 3, Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ op :: GHC.Types.Bool -> GHC.Types.Bool -> GHC.Types.Bool
                   ds :: Main.Val
                   ds1 :: Main.Val ->
                 case ds of wild {
                   DEFAULT -> Main.liftBoolOp1
                   Main.BoolVal x10
                   -> case ds1 of wild1 {
                        DEFAULT -> Main.liftBoolOp1
                        Main.BoolVal y -> Main.BoolVal (op x10 y) } }) -}
411bfc0524754446e0a087ba6ba4c52a
  liftBoolOp1 :: Main.Val
  {- Strictness: m4, Unfolding: (Main.ExnVal Main.liftBoolOp2) -}
eb2e5d4355d6775e54dda4c6cbb38a8e
  liftBoolOp2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Cannot lift"#) -}
6d41b93cf6e55a9c21112d298b4c351d
  liftCompOp ::
    (GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Bool)
    -> Main.Val -> Main.Val -> Main.Val
  {- Arity: 3, Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ op :: GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Bool
                   ds :: Main.Val
                   ds1 :: Main.Val ->
                 case ds of wild {
                   DEFAULT -> Main.liftBoolOp1
                   Main.IntVal x10
                   -> case ds1 of wild1 {
                        DEFAULT -> Main.liftBoolOp1
                        Main.IntVal y -> Main.BoolVal (op x10 y) } }) -}
b6c76a5aed666ee29511440b1edefb6b
  liftIntOp ::
    (GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Int)
    -> Main.Val -> Main.Val -> Main.Val
  {- Arity: 3, Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ op :: GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Int
                   ds :: Main.Val
                   ds1 :: Main.Val ->
                 case ds of wild {
                   DEFAULT -> Main.liftBoolOp1
                   Main.IntVal x10
                   -> case ds1 of wild1 {
                        DEFAULT -> Main.liftBoolOp1
                        Main.IntVal y -> Main.IntVal (op x10 y) } }) -}
6019071401f6e183f609e0862a538451
  main :: GHC.Types.IO Main.Result
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.NTCo:IO[0] <Main.Result>_R)) -}
154a659a434dc1ba7aec4aee32dbeae0
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Main.Result #)
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ s :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Main.main2
                        GHC.Types.True
                        s of ds1 { (#,#) ipv ipv1 ->
                 Main.$wa4
                   (Data.HashMap.Base.Empty @ GHC.Base.String @ Main.Stmt)
                   (Data.HashMap.Base.Empty @ GHC.Base.String @ Main.Val)
                   (GHC.Types.[] @ GHC.Base.String)
                   ipv }) -}
c5edaf458c0e9a774d57e82c89857cf6
  main2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "Welcome to your interpreter!"#) -}
f0fa1976afb53e592f8456b7378d7b60
  mulOp ::
    Text.Parsec.Prim.Stream s m GHC.Types.Char =>
    Text.Parsec.Prim.ParsecT s u m (Main.Exp -> Main.Exp -> Main.Exp)
  {- Arity: 6,
     Strictness: <L,U(U(U,U,U,U,U),C(U))><L,U(U,U(U,U,U),U)><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                Main.mulOp1
                  `cast`
                (forall s u (m :: * -> *).
                 <Text.Parsec.Prim.Stream s m GHC.Types.Char>_R
                 ->_R Sym (Text.Parsec.Prim.NTCo:ParsecT[0]
                               <s>_R <u>_R <m>_R <Main.Exp -> Main.Exp -> Main.Exp>_R)) -}
a9ed2c8482634b0619a8e4ef2c354e23
  mulOp1 ::
    Text.Parsec.Prim.Stream s m GHC.Types.Char =>
    forall b.
    Text.Parsec.Prim.State s u
    -> ((Main.Exp -> Main.Exp -> Main.Exp)
        -> Text.Parsec.Prim.State s u
        -> Text.Parsec.Error.ParseError
        -> m b)
    -> (Text.Parsec.Error.ParseError -> m b)
    -> ((Main.Exp -> Main.Exp -> Main.Exp)
        -> Text.Parsec.Prim.State s u
        -> Text.Parsec.Error.ParseError
        -> m b)
    -> (Text.Parsec.Error.ParseError -> m b)
    -> m b
  {- Arity: 6,
     Strictness: <L,U(U(U,U,U,U,U),C(U))><L,U(U,U(U,U,U),U)><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,C(U)> -}
bf006a2b563d209fc331b965661c294c
  orOp ::
    Text.Parsec.Prim.ParsecT
      [GHC.Types.Char]
      st
      Data.Functor.Identity.Identity
      (Main.Exp -> Main.Exp -> Main.Exp)
  {- Arity: 5,
     Strictness: <L,U(U,U(U,U,U),U)><L,C(C1(C1(U)))><L,A><L,C(C1(C1(U)))><L,U>,
     Unfolding: InlineRule (0, True, True)
                Main.appExp4
                  `cast`
                (forall st.
                 Sym (Text.Parsec.Prim.NTCo:ParsecT[0]
                          <[GHC.Types.Char]>_R
                          <st>_R
                          <Data.Functor.Identity.Identity>_R
                          <Main.Exp -> Main.Exp -> Main.Exp>_R)) -}
3b74f0c709bf57d5a382e0bdb83bf5ef
  parens ::
    Text.Parsec.Prim.Stream s m GHC.Types.Char =>
    Text.Parsec.Prim.ParsecT s u m b
    -> Text.Parsec.Prim.ParsecT s u m b
  {- Arity: 7,
     Strictness: <L,U(U(U,U,U,U,U),C(U))><L,C(C1(C1(C1(C1(U)))))><L,U(U,U(U,U,U),U)><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                Main.parens2
                  `cast`
                (forall b s u (m :: * -> *).
                 <Text.Parsec.Prim.Stream s m GHC.Types.Char>_R
                 ->_R <Text.Parsec.Prim.ParsecT s u m b>_R
                 ->_R Sym (Text.Parsec.Prim.NTCo:ParsecT[0]
                               <s>_R <u>_R <m>_R <b>_R)) -}
68967207190656b3651d8aacc12eeffe
  parens1 ::
    Text.Parsec.Prim.ParsecT
      [GHC.Types.Char] u Data.Functor.Identity.Identity b
    -> forall b1.
       Text.Parsec.Prim.State [GHC.Types.Char] u
       -> (b
           -> Text.Parsec.Prim.State [GHC.Types.Char] u
           -> Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b1)
       -> (Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b1)
       -> (b
           -> Text.Parsec.Prim.State [GHC.Types.Char] u
           -> Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b1)
       -> (Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b1)
       -> Data.Functor.Identity.Identity b1
  {- Arity: 6,
     Strictness: <L,C(C1(C1(C1(C1(U)))))><L,U(U,U(U,U,U),U)><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,C(U)> -}
34e7ac2de6fb3e848e8c7c40be7c7f27
  parens2 ::
    Text.Parsec.Prim.Stream s m GHC.Types.Char =>
    Text.Parsec.Prim.ParsecT s u m b
    -> forall b1.
       Text.Parsec.Prim.State s u
       -> (b
           -> Text.Parsec.Prim.State s u
           -> Text.Parsec.Error.ParseError
           -> m b1)
       -> (Text.Parsec.Error.ParseError -> m b1)
       -> (b
           -> Text.Parsec.Prim.State s u
           -> Text.Parsec.Error.ParseError
           -> m b1)
       -> (Text.Parsec.Error.ParseError -> m b1)
       -> m b1
  {- Arity: 7,
     Strictness: <L,U(U(U,U,U,U,U),C(U))><L,C(C1(C1(C1(C1(U)))))><L,U(U,U(U,U,U),U)><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,C(U)> -}
83f1baa95071489d6a71ea270c95cd12
  printStmt ::
    Text.Parsec.Prim.ParsecT
      [GHC.Types.Char] st Data.Functor.Identity.Identity Main.Stmt
  {- Arity: 5,
     Strictness: <L,U(U,U(U,U,U),U)><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,U>,
     Unfolding: InlineRule (0, True, True)
                Main.printStmt1
                  `cast`
                (forall st.
                 Sym (Text.Parsec.Prim.NTCo:ParsecT[0]
                          <[GHC.Types.Char]>_R
                          <st>_R
                          <Data.Functor.Identity.Identity>_R
                          <Main.Stmt>_R)) -}
13f7dbe2424d8de369bbde558e1648aa
  printStmt1 ::
    Text.Parsec.Prim.State [GHC.Types.Char] st
    -> (Main.Stmt
        -> Text.Parsec.Prim.State [GHC.Types.Char] st
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Main.Stmt
        -> Text.Parsec.Prim.State [GHC.Types.Char] st
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5,
     Strictness: <L,U(U,U(U,U,U),U)><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,U>,
     Unfolding: (\ @ st
                   @ b1
                   eta :: Text.Parsec.Prim.State [GHC.Types.Char] st
                   eta1 :: Main.Stmt
                           -> Text.Parsec.Prim.State [GHC.Types.Char] st
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1
                   eta2 :: Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1
                   eta3 :: Main.Stmt
                           -> Text.Parsec.Prim.State [GHC.Types.Char] st
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1
                   eta4 :: Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1 ->
                 Main.andOp3
                   @ st
                   Main.printStmt4
                   @ b1
                   eta
                   (\ x10 :: GHC.Base.String
                      s2 :: Text.Parsec.Prim.State [GHC.Types.Char] st[OneShot]
                      err :: Text.Parsec.Error.ParseError[OneShot] ->
                    Main.printStmt2
                      @ st
                      @ b1
                      s2
                      eta1
                      eta2
                      (\ x11 :: Main.Stmt
                         s3 :: Text.Parsec.Prim.State [GHC.Types.Char] st[OneShot]
                         err' :: Text.Parsec.Error.ParseError[OneShot] ->
                       eta1 x11 s3 (Text.Parsec.Error.mergeError err err'))
                      (\ err' :: Text.Parsec.Error.ParseError ->
                       eta2 (Text.Parsec.Error.mergeError err err')))
                   eta4
                   (\ x10 :: GHC.Base.String
                      s2 :: Text.Parsec.Prim.State [GHC.Types.Char] st[OneShot]
                      err :: Text.Parsec.Error.ParseError[OneShot] ->
                    Main.printStmt2
                      @ st
                      @ b1
                      s2
                      eta1
                      eta2
                      (\ x11 :: Main.Stmt
                         s3 :: Text.Parsec.Prim.State [GHC.Types.Char] st[OneShot]
                         err' :: Text.Parsec.Error.ParseError[OneShot] ->
                       eta3 x11 s3 (Text.Parsec.Error.mergeError err err'))
                      (\ err' :: Text.Parsec.Error.ParseError ->
                       eta4 (Text.Parsec.Error.mergeError err err')))
                   eta4) -}
5810b2a9fcee8f4b28ce7146a0bd136c
  printStmt2 ::
    Text.Parsec.Prim.State [GHC.Types.Char] st
    -> (Main.Stmt
        -> Text.Parsec.Prim.State [GHC.Types.Char] st
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Main.Stmt
        -> Text.Parsec.Prim.State [GHC.Types.Char] st
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5,
     Strictness: <L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,U>,
     Unfolding: (\ @ st
                   @ b1
                   eta :: Text.Parsec.Prim.State [GHC.Types.Char] st
                   eta1 :: Main.Stmt
                           -> Text.Parsec.Prim.State [GHC.Types.Char] st
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1
                   eta2 :: Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1
                   eta3 :: Main.Stmt
                           -> Text.Parsec.Prim.State [GHC.Types.Char] st
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1
                   eta4 :: Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1 ->
                 Text.Parsec.Combinator.chainl3
                   @ [GHC.Types.Char]
                   @ st
                   @ Data.Functor.Identity.Identity
                   @ Main.Exp
                   (Main.appExp6 @ st)
                     `cast`
                   (Sym (Text.Parsec.Prim.NTCo:ParsecT[0]
                             <[GHC.Types.Char]>_R
                             <st>_R
                             <Data.Functor.Identity.Identity>_R
                             <Main.Exp>_R))
                   (Main.appExp4 @ st)
                     `cast`
                   (Sym (Text.Parsec.Prim.NTCo:ParsecT[0]
                             <[GHC.Types.Char]>_R
                             <st>_R
                             <Data.Functor.Identity.Identity>_R
                             <Main.Exp -> Main.Exp -> Main.Exp>_R))
                   @ b1
                   eta
                   (\ x10 :: Main.Exp
                      s2 :: Text.Parsec.Prim.State [GHC.Types.Char] st[OneShot]
                      err :: Text.Parsec.Error.ParseError[OneShot] ->
                    Main.printStmt3
                      @ st
                      x10
                      @ b1
                      s2
                      eta1
                      eta2
                      (\ x11 :: Main.Stmt
                         s3 :: Text.Parsec.Prim.State [GHC.Types.Char] st[OneShot]
                         err' :: Text.Parsec.Error.ParseError[OneShot] ->
                       eta1 x11 s3 (Text.Parsec.Error.mergeError err err'))
                      (\ err' :: Text.Parsec.Error.ParseError ->
                       eta2 (Text.Parsec.Error.mergeError err err')))
                   eta2
                   (\ x10 :: Main.Exp
                      s2 :: Text.Parsec.Prim.State [GHC.Types.Char] st[OneShot]
                      err :: Text.Parsec.Error.ParseError[OneShot] ->
                    Main.printStmt3
                      @ st
                      x10
                      @ b1
                      s2
                      eta1
                      eta2
                      (\ x11 :: Main.Stmt
                         s3 :: Text.Parsec.Prim.State [GHC.Types.Char] st[OneShot]
                         err' :: Text.Parsec.Error.ParseError[OneShot] ->
                       eta3 x11 s3 (Text.Parsec.Error.mergeError err err'))
                      (\ err' :: Text.Parsec.Error.ParseError ->
                       eta4 (Text.Parsec.Error.mergeError err err')))
                   eta4) -}
0710f19111e96ae7dfff2d0d2238af29
  printStmt3 ::
    Main.Exp
    -> forall b.
       Text.Parsec.Prim.State [GHC.Types.Char] st
       -> (Main.Stmt
           -> Text.Parsec.Prim.State [GHC.Types.Char] st
           -> Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b)
       -> (Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b)
       -> (Main.Stmt
           -> Text.Parsec.Prim.State [GHC.Types.Char] st
           -> Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b)
       -> (Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b)
       -> Data.Functor.Identity.Identity b
  {- Arity: 6,
     Strictness: <L,U><L,U(U,U(U,U,U),U)><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Unfolding: (\ @ st
                   e :: Main.Exp
                   @ b
                   eta :: Text.Parsec.Prim.State [GHC.Types.Char] st
                   eta1 :: Main.Stmt
                           -> Text.Parsec.Prim.State [GHC.Types.Char] st
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b
                   eta2 :: Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b
                   eta3 :: Main.Stmt
                           -> Text.Parsec.Prim.State [GHC.Types.Char] st
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b
                   eta4 :: Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b ->
                 let {
                   x10 :: Main.Stmt = Main.PrintStmt e
                 } in
                 Main.andOp3
                   @ st
                   Main.letExp6
                   @ b
                   eta
                   (\ x11 :: GHC.Base.String
                      s2 :: Text.Parsec.Prim.State [GHC.Types.Char] st[OneShot]
                      err :: Text.Parsec.Error.ParseError[OneShot] ->
                    eta1
                      x10
                      s2
                      (case s2 of wild { Text.Parsec.Prim.State ds3 ds4 ds5 ->
                       case ds4 of ww10 { Text.Parsec.Pos.SourcePos ww11 ww12 ww13 ->
                       case err of ww { Text.Parsec.Error.ParseError ww1 ww2 ->
                       case ww1 of ww3 { Text.Parsec.Pos.SourcePos ww4 ww5 ww6 ->
                       case Text.Parsec.Error.$wmergeError
                              ww4
                              ww5
                              ww6
                              ww2
                              ww11
                              ww12
                              ww13
                              (GHC.Types.[]
                                 @ Text.Parsec.Error.Message) of ww14 { (#,#) ww15 ww16 ->
                       Text.Parsec.Error.ParseError ww15 ww16 } } } } }))
                   eta2
                   (\ x11 :: GHC.Base.String
                      s2 :: Text.Parsec.Prim.State [GHC.Types.Char] st[OneShot]
                      err :: Text.Parsec.Error.ParseError[OneShot] ->
                    eta3
                      x10
                      s2
                      (case s2 of wild { Text.Parsec.Prim.State ds3 ds4 ds5 ->
                       case ds4 of ww10 { Text.Parsec.Pos.SourcePos ww11 ww12 ww13 ->
                       case err of ww { Text.Parsec.Error.ParseError ww1 ww2 ->
                       case ww1 of ww3 { Text.Parsec.Pos.SourcePos ww4 ww5 ww6 ->
                       case Text.Parsec.Error.$wmergeError
                              ww4
                              ww5
                              ww6
                              ww2
                              ww11
                              ww12
                              ww13
                              (GHC.Types.[]
                                 @ Text.Parsec.Error.Message) of ww14 { (#,#) ww15 ww16 ->
                       Text.Parsec.Error.ParseError ww15 ww16 } } } } }))
                   eta4) -}
f26642e4d62b02c7cb4674ed536c1b40
  printStmt4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "print"#) -}
eb61fa1fb3e58699237497e97a79b9b9
  procStmt ::
    Text.Parsec.Prim.ParsecT
      [GHC.Types.Char] st Data.Functor.Identity.Identity Main.Stmt
  {- Arity: 5,
     Strictness: <L,U(U,U(U,U,U),U)><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,U>,
     Unfolding: InlineRule (0, True, True)
                Main.procStmt1
                  `cast`
                (forall st.
                 Sym (Text.Parsec.Prim.NTCo:ParsecT[0]
                          <[GHC.Types.Char]>_R
                          <st>_R
                          <Data.Functor.Identity.Identity>_R
                          <Main.Stmt>_R)) -}
77d7d96e8d6b6796659fbb954e118a46
  procStmt1 ::
    Text.Parsec.Prim.State [GHC.Types.Char] st
    -> (Main.Stmt
        -> Text.Parsec.Prim.State [GHC.Types.Char] st
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Main.Stmt
        -> Text.Parsec.Prim.State [GHC.Types.Char] st
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5,
     Strictness: <L,U(U,U(U,U,U),U)><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,U>,
     Unfolding: (\ @ st
                   @ b1
                   eta :: Text.Parsec.Prim.State [GHC.Types.Char] st
                   eta1 :: Main.Stmt
                           -> Text.Parsec.Prim.State [GHC.Types.Char] st
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1
                   eta2 :: Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1
                   eta3 :: Main.Stmt
                           -> Text.Parsec.Prim.State [GHC.Types.Char] st
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1
                   eta4 :: Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1 ->
                 Main.andOp3
                   @ st
                   Main.procStmt4
                   @ b1
                   eta
                   (\ x10 :: GHC.Base.String
                      s2 :: Text.Parsec.Prim.State [GHC.Types.Char] st[OneShot]
                      err :: Text.Parsec.Error.ParseError[OneShot] ->
                    Main.procStmt2
                      @ st
                      @ b1
                      s2
                      eta1
                      eta2
                      (\ x11 :: Main.Stmt
                         s3 :: Text.Parsec.Prim.State [GHC.Types.Char] st[OneShot]
                         err' :: Text.Parsec.Error.ParseError[OneShot] ->
                       eta1 x11 s3 (Text.Parsec.Error.mergeError err err'))
                      (\ err' :: Text.Parsec.Error.ParseError ->
                       eta2 (Text.Parsec.Error.mergeError err err')))
                   eta4
                   (\ x10 :: GHC.Base.String
                      s2 :: Text.Parsec.Prim.State [GHC.Types.Char] st[OneShot]
                      err :: Text.Parsec.Error.ParseError[OneShot] ->
                    Main.procStmt2
                      @ st
                      @ b1
                      s2
                      eta1
                      eta2
                      (\ x11 :: Main.Stmt
                         s3 :: Text.Parsec.Prim.State [GHC.Types.Char] st[OneShot]
                         err' :: Text.Parsec.Error.ParseError[OneShot] ->
                       eta3 x11 s3 (Text.Parsec.Error.mergeError err err'))
                      (\ err' :: Text.Parsec.Error.ParseError ->
                       eta4 (Text.Parsec.Error.mergeError err err')))
                   eta4) -}
b2dc4204afab2a0e6f63b0f0d917d0f1
  procStmt2 ::
    Text.Parsec.Prim.State [GHC.Types.Char] st
    -> (Main.Stmt
        -> Text.Parsec.Prim.State [GHC.Types.Char] st
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Main.Stmt
        -> Text.Parsec.Prim.State [GHC.Types.Char] st
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5,
     Strictness: <L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Unfolding: (\ @ st
                   @ b1
                   eta :: Text.Parsec.Prim.State [GHC.Types.Char] st
                   eta1 :: Main.Stmt
                           -> Text.Parsec.Prim.State [GHC.Types.Char] st
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1
                   eta2 :: Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1
                   eta3 :: Main.Stmt
                           -> Text.Parsec.Prim.State [GHC.Types.Char] st
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1
                   eta4 :: Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1 ->
                 Main.callStmt4
                   @ st
                   @ b1
                   eta
                   (\ x10 :: [GHC.Types.Char]
                      s2 :: Text.Parsec.Prim.State [GHC.Types.Char] st[OneShot]
                      err :: Text.Parsec.Error.ParseError[OneShot] ->
                    Main.procStmt3
                      @ st
                      x10
                      @ b1
                      s2
                      eta1
                      eta2
                      (\ x11 :: Main.Stmt
                         s3 :: Text.Parsec.Prim.State [GHC.Types.Char] st[OneShot]
                         err' :: Text.Parsec.Error.ParseError[OneShot] ->
                       eta1 x11 s3 (Text.Parsec.Error.mergeError err err'))
                      (\ err' :: Text.Parsec.Error.ParseError ->
                       eta2 (Text.Parsec.Error.mergeError err err')))
                   eta2
                   (\ x10 :: [GHC.Types.Char]
                      s2 :: Text.Parsec.Prim.State [GHC.Types.Char] st[OneShot]
                      err :: Text.Parsec.Error.ParseError[OneShot] ->
                    Main.procStmt3
                      @ st
                      x10
                      @ b1
                      s2
                      eta1
                      eta2
                      (\ x11 :: Main.Stmt
                         s3 :: Text.Parsec.Prim.State [GHC.Types.Char] st[OneShot]
                         err' :: Text.Parsec.Error.ParseError[OneShot] ->
                       eta3 x11 s3 (Text.Parsec.Error.mergeError err err'))
                      (\ err' :: Text.Parsec.Error.ParseError ->
                       eta4 (Text.Parsec.Error.mergeError err err')))
                   eta4) -}
c1b3ff600a6f81437af185214d159709
  procStmt3 ::
    [GHC.Types.Char]
    -> forall b.
       Text.Parsec.Prim.State [GHC.Types.Char] st
       -> (Main.Stmt
           -> Text.Parsec.Prim.State [GHC.Types.Char] st
           -> Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b)
       -> (Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b)
       -> (Main.Stmt
           -> Text.Parsec.Prim.State [GHC.Types.Char] st
           -> Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b)
       -> (Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b)
       -> Data.Functor.Identity.Identity b
  {- Arity: 6,
     Strictness: <L,U><L,U(U,U(U,U,U),U)><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,C(U)> -}
804fac21bcdc7302aa7c90d8b65e569e
  procStmt4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "procedure"#) -}
22c52a99249f4c90cae611ad93bcbc38
  quitStmt ::
    Text.Parsec.Prim.ParsecT
      [GHC.Types.Char] st Data.Functor.Identity.Identity Main.Stmt
  {- Arity: 5,
     Strictness: <L,U(U,U(U,U,U),U)><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,U>,
     Unfolding: InlineRule (0, True, True)
                Main.quitStmt1
                  `cast`
                (forall st.
                 Sym (Text.Parsec.Prim.NTCo:ParsecT[0]
                          <[GHC.Types.Char]>_R
                          <st>_R
                          <Data.Functor.Identity.Identity>_R
                          <Main.Stmt>_R)) -}
44a110152e86ce6a7b50692ac5fa56a9
  quitStmt1 ::
    Text.Parsec.Prim.State [GHC.Types.Char] st
    -> (Main.Stmt
        -> Text.Parsec.Prim.State [GHC.Types.Char] st
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Main.Stmt
        -> Text.Parsec.Prim.State [GHC.Types.Char] st
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5,
     Strictness: <L,U(U,U(U,U,U),U)><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,U>,
     Unfolding: (\ @ st
                   @ b1
                   eta :: Text.Parsec.Prim.State [GHC.Types.Char] st
                   eta1 :: Main.Stmt
                           -> Text.Parsec.Prim.State [GHC.Types.Char] st
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1
                   eta2 :: Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1
                   eta3 :: Main.Stmt
                           -> Text.Parsec.Prim.State [GHC.Types.Char] st
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1
                   eta4 :: Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1 ->
                 Main.andOp3
                   @ st
                   Main.quitStmt3
                   @ b1
                   eta
                   (\ x10 :: GHC.Base.String
                      s2 :: Text.Parsec.Prim.State [GHC.Types.Char] st[OneShot]
                      err :: Text.Parsec.Error.ParseError[OneShot] ->
                    Main.quitStmt2
                      @ st
                      @ b1
                      s2
                      eta1
                      eta2
                      (\ x11 :: Main.Stmt
                         s3 :: Text.Parsec.Prim.State [GHC.Types.Char] st[OneShot]
                         err' :: Text.Parsec.Error.ParseError[OneShot] ->
                       eta1 x11 s3 (Text.Parsec.Error.mergeError err err'))
                      (\ err' :: Text.Parsec.Error.ParseError ->
                       eta2 (Text.Parsec.Error.mergeError err err')))
                   eta4
                   (\ x10 :: GHC.Base.String
                      s2 :: Text.Parsec.Prim.State [GHC.Types.Char] st[OneShot]
                      err :: Text.Parsec.Error.ParseError[OneShot] ->
                    Main.quitStmt2
                      @ st
                      @ b1
                      s2
                      eta1
                      eta2
                      (\ x11 :: Main.Stmt
                         s3 :: Text.Parsec.Prim.State [GHC.Types.Char] st[OneShot]
                         err' :: Text.Parsec.Error.ParseError[OneShot] ->
                       eta3 x11 s3 (Text.Parsec.Error.mergeError err err'))
                      (\ err' :: Text.Parsec.Error.ParseError ->
                       eta4 (Text.Parsec.Error.mergeError err err')))
                   eta4) -}
ac976ade7e4aa074b898135a1db15dd5
  quitStmt2 ::
    Text.Parsec.Prim.State [GHC.Types.Char] st
    -> (Main.Stmt
        -> Text.Parsec.Prim.State [GHC.Types.Char] st
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Main.Stmt
        -> Text.Parsec.Prim.State [GHC.Types.Char] st
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5,
     Strictness: <L,U(U,U(U,U,U),U)><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Unfolding: (\ @ st
                   @ b1
                   eta :: Text.Parsec.Prim.State [GHC.Types.Char] st
                   eta1 :: Main.Stmt
                           -> Text.Parsec.Prim.State [GHC.Types.Char] st
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1
                   eta2 :: Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1
                   eta3 :: Main.Stmt
                           -> Text.Parsec.Prim.State [GHC.Types.Char] st
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1
                   eta4 :: Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1 ->
                 Main.andOp3
                   @ st
                   Main.letExp6
                   @ b1
                   eta
                   (\ x10 :: GHC.Base.String
                      s2 :: Text.Parsec.Prim.State [GHC.Types.Char] st[OneShot]
                      err :: Text.Parsec.Error.ParseError[OneShot] ->
                    eta1
                      Main.QuitStmt
                      s2
                      (case s2 of wild { Text.Parsec.Prim.State ds3 ds4 ds5 ->
                       case ds4 of ww10 { Text.Parsec.Pos.SourcePos ww11 ww12 ww13 ->
                       case err of ww { Text.Parsec.Error.ParseError ww1 ww2 ->
                       case ww1 of ww3 { Text.Parsec.Pos.SourcePos ww4 ww5 ww6 ->
                       case Text.Parsec.Error.$wmergeError
                              ww4
                              ww5
                              ww6
                              ww2
                              ww11
                              ww12
                              ww13
                              (GHC.Types.[]
                                 @ Text.Parsec.Error.Message) of ww14 { (#,#) ww15 ww16 ->
                       Text.Parsec.Error.ParseError ww15 ww16 } } } } }))
                   eta2
                   (\ x10 :: GHC.Base.String
                      s2 :: Text.Parsec.Prim.State [GHC.Types.Char] st[OneShot]
                      err :: Text.Parsec.Error.ParseError[OneShot] ->
                    eta3
                      Main.QuitStmt
                      s2
                      (case s2 of wild { Text.Parsec.Prim.State ds3 ds4 ds5 ->
                       case ds4 of ww10 { Text.Parsec.Pos.SourcePos ww11 ww12 ww13 ->
                       case err of ww { Text.Parsec.Error.ParseError ww1 ww2 ->
                       case ww1 of ww3 { Text.Parsec.Pos.SourcePos ww4 ww5 ww6 ->
                       case Text.Parsec.Error.$wmergeError
                              ww4
                              ww5
                              ww6
                              ww2
                              ww11
                              ww12
                              ww13
                              (GHC.Types.[]
                                 @ Text.Parsec.Error.Message) of ww14 { (#,#) ww15 ww16 ->
                       Text.Parsec.Error.ParseError ww15 ww16 } } } } }))
                   eta4) -}
547ce28b55ccc02fb9ff9d29ff1ac342
  quitStmt3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "quit"#) -}
89369a4ee2cf91f9aff53ce3f94332ac
  repl ::
    Main.PEnv
    -> Main.Env
    -> [GHC.Base.String]
    -> GHC.Base.String
    -> GHC.Types.IO Main.Result
  {- Arity: 5, Strictness: <L,U><L,U><S,1*U><L,A><L,U>,
     Unfolding: InlineRule (0, True, True)
                Main.repl1
                  `cast`
                (<Main.PEnv>_R
                 ->_R <Main.Env>_R
                 ->_R <[GHC.Base.String]>_R
                 ->_R <GHC.Base.String>_R
                 ->_R Sym (GHC.Types.NTCo:IO[0] <Main.Result>_R)) -}
4249d93769107cae527b7fb99b8baf3d
  repl1 ::
    Main.PEnv
    -> Main.Env
    -> [GHC.Base.String]
    -> GHC.Base.String
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Main.Result #)
  {- Arity: 5, Strictness: <L,U><L,U><S,1*U><L,A><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (5, True, True)
                (\ w :: Main.PEnv
                   w1 :: Main.Env
                   w2 :: [GHC.Base.String]
                   w3 :: GHC.Base.String
                   w4 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 Main.$wa4 w w1 w2 w4) -}
5194379000b58f8d5f08d026c7c29aab
  run ::
    Text.Parsec.Prim.Stream s Data.Functor.Identity.Identity t =>
    Text.Parsec.Prim.Parsec s () a -> s -> a
  {- Arity: 3,
     Strictness: <S(SL),1*U(1*U,A)><L,1*C1(C1(C1(C1(C1(U)))))><L,U>,
     Unfolding: (\ @ s
                   @ a15
                   @ t
                   $dStream :: Text.Parsec.Prim.Stream
                                 s Data.Functor.Identity.Identity t
                   p :: Text.Parsec.Prim.Parsec s () a15
                   s1 :: s ->
                 case (Text.Parsec.Prim.runPT
                         @ s
                         @ ()
                         @ Data.Functor.Identity.Identity
                         @ a15
                         @ t
                         $dStream
                         p
                         GHC.Tuple.()
                         Main.run2
                         s1)
                        `cast`
                      (Data.Functor.Identity.NTCo:Identity[0]
                           <Data.Either.Either Text.Parsec.Error.ParseError a15>_R) of wild {
                   Data.Either.Left x10 -> Main.run1 @ a15 x10
                   Data.Either.Right x10 -> x10 }) -}
3f2f23b068b8c5e9a01e22605f18f040
  run1 :: Text.Parsec.Error.ParseError -> a
  {- Arity: 1, Strictness: <L,U>b -}
20f199c07b1857a903d96825e29350b7
  run2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "<stdin>"#) -}
4189d24c25f7a7d00cc076af249c3e00
  seqStmt ::
    Text.Parsec.Prim.ParsecT
      [GHC.Types.Char] st Data.Functor.Identity.Identity Main.Stmt
  {- Arity: 5,
     Strictness: <L,U(U,U(U,U,U),U)><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,U>,
     Unfolding: InlineRule (0, True, True)
                Main.seqStmt1
                  `cast`
                (forall st.
                 Sym (Text.Parsec.Prim.NTCo:ParsecT[0]
                          <[GHC.Types.Char]>_R
                          <st>_R
                          <Data.Functor.Identity.Identity>_R
                          <Main.Stmt>_R)) -}
3117304ebb300575992e37ea9791e718
  seqStmt1 ::
    Text.Parsec.Prim.State [GHC.Types.Char] st
    -> (Main.Stmt
        -> Text.Parsec.Prim.State [GHC.Types.Char] st
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Main.Stmt
        -> Text.Parsec.Prim.State [GHC.Types.Char] st
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5,
     Strictness: <L,U(U,U(U,U,U),U)><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,U>,
     Unfolding: (\ @ st
                   @ b1
                   eta :: Text.Parsec.Prim.State [GHC.Types.Char] st
                   eta1 :: Main.Stmt
                           -> Text.Parsec.Prim.State [GHC.Types.Char] st
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1
                   eta2 :: Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1
                   eta3 :: Main.Stmt
                           -> Text.Parsec.Prim.State [GHC.Types.Char] st
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1
                   eta4 :: Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1 ->
                 Main.andOp3
                   @ st
                   Main.seqStmt5
                   @ b1
                   eta
                   (\ x10 :: GHC.Base.String
                      s2 :: Text.Parsec.Prim.State [GHC.Types.Char] st[OneShot]
                      err :: Text.Parsec.Error.ParseError[OneShot] ->
                    Main.seqStmt2
                      @ st
                      @ b1
                      s2
                      eta1
                      eta2
                      (\ x11 :: Main.Stmt
                         s3 :: Text.Parsec.Prim.State [GHC.Types.Char] st[OneShot]
                         err' :: Text.Parsec.Error.ParseError[OneShot] ->
                       eta1 x11 s3 (Text.Parsec.Error.mergeError err err'))
                      (\ err' :: Text.Parsec.Error.ParseError ->
                       eta2 (Text.Parsec.Error.mergeError err err')))
                   eta4
                   (\ x10 :: GHC.Base.String
                      s2 :: Text.Parsec.Prim.State [GHC.Types.Char] st[OneShot]
                      err :: Text.Parsec.Error.ParseError[OneShot] ->
                    Main.seqStmt2
                      @ st
                      @ b1
                      s2
                      eta1
                      eta2
                      (\ x11 :: Main.Stmt
                         s3 :: Text.Parsec.Prim.State [GHC.Types.Char] st[OneShot]
                         err' :: Text.Parsec.Error.ParseError[OneShot] ->
                       eta3 x11 s3 (Text.Parsec.Error.mergeError err err'))
                      (\ err' :: Text.Parsec.Error.ParseError ->
                       eta4 (Text.Parsec.Error.mergeError err err')))
                   eta4) -}
47e6c9c5a79680e94b1b60d7453de83f
  seqStmt2 ::
    Text.Parsec.Prim.State [GHC.Types.Char] st
    -> (Main.Stmt
        -> Text.Parsec.Prim.State [GHC.Types.Char] st
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Main.Stmt
        -> Text.Parsec.Prim.State [GHC.Types.Char] st
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5,
     Strictness: <L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,U>,
     Unfolding: (\ @ st
                   @ b1
                   eta :: Text.Parsec.Prim.State [GHC.Types.Char] st
                   eta1 :: Main.Stmt
                           -> Text.Parsec.Prim.State [GHC.Types.Char] st
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1
                   eta2 :: Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1
                   eta3 :: Main.Stmt
                           -> Text.Parsec.Prim.State [GHC.Types.Char] st
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1
                   eta4 :: Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1 ->
                 Text.Parsec.Combinator.many3
                   @ [GHC.Types.Char]
                   @ st
                   @ Data.Functor.Identity.Identity
                   @ Main.Stmt
                   (Main.seqStmt4 @ st)
                     `cast`
                   (Sym (Text.Parsec.Prim.NTCo:ParsecT[0]
                             <[GHC.Types.Char]>_R
                             <st>_R
                             <Data.Functor.Identity.Identity>_R
                             <Main.Stmt>_R))
                   @ b1
                   eta
                   (\ x10 :: [Main.Stmt]
                      s2 :: Text.Parsec.Prim.State [GHC.Types.Char] st[OneShot]
                      err :: Text.Parsec.Error.ParseError[OneShot] ->
                    Main.seqStmt3
                      @ st
                      x10
                      @ b1
                      s2
                      eta1
                      eta2
                      (\ x11 :: Main.Stmt
                         s3 :: Text.Parsec.Prim.State [GHC.Types.Char] st[OneShot]
                         err' :: Text.Parsec.Error.ParseError[OneShot] ->
                       eta1 x11 s3 (Text.Parsec.Error.mergeError err err'))
                      (\ err' :: Text.Parsec.Error.ParseError ->
                       eta2 (Text.Parsec.Error.mergeError err err')))
                   eta2
                   (\ x10 :: [Main.Stmt]
                      s2 :: Text.Parsec.Prim.State [GHC.Types.Char] st[OneShot]
                      err :: Text.Parsec.Error.ParseError[OneShot] ->
                    Main.seqStmt3
                      @ st
                      x10
                      @ b1
                      s2
                      eta1
                      eta2
                      (\ x11 :: Main.Stmt
                         s3 :: Text.Parsec.Prim.State [GHC.Types.Char] st[OneShot]
                         err' :: Text.Parsec.Error.ParseError[OneShot] ->
                       eta3 x11 s3 (Text.Parsec.Error.mergeError err err'))
                      (\ err' :: Text.Parsec.Error.ParseError ->
                       eta4 (Text.Parsec.Error.mergeError err err')))
                   eta4) -}
c49bde190f4ac17114bcf474546cae7b
  seqStmt3 ::
    [Main.Stmt]
    -> forall b.
       Text.Parsec.Prim.State [GHC.Types.Char] st
       -> (Main.Stmt
           -> Text.Parsec.Prim.State [GHC.Types.Char] st
           -> Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b)
       -> (Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b)
       -> (Main.Stmt
           -> Text.Parsec.Prim.State [GHC.Types.Char] st
           -> Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b)
       -> (Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b)
       -> Data.Functor.Identity.Identity b
  {- Arity: 6,
     Strictness: <L,U><L,U(U,U(U,U,U),U)><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,C(U)> -}
0c70286a4d80220e183fafda245eb457
  seqStmt4 ::
    Text.Parsec.Prim.State [GHC.Types.Char] st
    -> (Main.Stmt
        -> Text.Parsec.Prim.State [GHC.Types.Char] st
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Main.Stmt
        -> Text.Parsec.Prim.State [GHC.Types.Char] st
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> Data.Functor.Identity.Identity b
  {- Arity: 5,
     Strictness: <L,U(U,U(U,U,U),U)><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,C(U)> -}
e91b51053d2f430b8c449da53a547bef
  seqStmt5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "do"#) -}
ac74ac4318832935fff1436c994165bc
  setStmt ::
    Text.Parsec.Prim.ParsecT
      [GHC.Types.Char] u Data.Functor.Identity.Identity Main.Stmt
  {- Arity: 5,
     Strictness: <L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                Main.setStmt1
                  `cast`
                (forall u.
                 Sym (Text.Parsec.Prim.NTCo:ParsecT[0]
                          <[GHC.Types.Char]>_R
                          <u>_R
                          <Data.Functor.Identity.Identity>_R
                          <Main.Stmt>_R)) -}
10e4906258fbda2d3f100d5b218c941e
  setStmt1 ::
    Text.Parsec.Prim.State [GHC.Types.Char] u
    -> (Main.Stmt
        -> Text.Parsec.Prim.State [GHC.Types.Char] u
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Main.Stmt
        -> Text.Parsec.Prim.State [GHC.Types.Char] u
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5,
     Strictness: <L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Unfolding: (\ @ u
                   @ b1
                   eta :: Text.Parsec.Prim.State [GHC.Types.Char] u
                   eta1 :: Main.Stmt
                           -> Text.Parsec.Prim.State [GHC.Types.Char] u
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1
                   eta2 :: Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1
                   eta3 :: Main.Stmt
                           -> Text.Parsec.Prim.State [GHC.Types.Char] u
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1
                   eta4 :: Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1 ->
                 Main.callStmt4
                   @ u
                   @ b1
                   eta
                   (\ x10 :: [GHC.Types.Char]
                      s2 :: Text.Parsec.Prim.State [GHC.Types.Char] u[OneShot]
                      err :: Text.Parsec.Error.ParseError[OneShot] ->
                    Main.setStmt2
                      @ u
                      x10
                      @ b1
                      s2
                      eta1
                      eta2
                      (\ x11 :: Main.Stmt
                         s3 :: Text.Parsec.Prim.State [GHC.Types.Char] u[OneShot]
                         err' :: Text.Parsec.Error.ParseError[OneShot] ->
                       eta1 x11 s3 (Text.Parsec.Error.mergeError err err'))
                      (\ err' :: Text.Parsec.Error.ParseError ->
                       eta2 (Text.Parsec.Error.mergeError err err')))
                   eta2
                   (\ x10 :: [GHC.Types.Char]
                      s2 :: Text.Parsec.Prim.State [GHC.Types.Char] u[OneShot]
                      err :: Text.Parsec.Error.ParseError[OneShot] ->
                    Main.setStmt2
                      @ u
                      x10
                      @ b1
                      s2
                      eta1
                      eta2
                      (\ x11 :: Main.Stmt
                         s3 :: Text.Parsec.Prim.State [GHC.Types.Char] u[OneShot]
                         err' :: Text.Parsec.Error.ParseError[OneShot] ->
                       eta3 x11 s3 (Text.Parsec.Error.mergeError err err'))
                      (\ err' :: Text.Parsec.Error.ParseError ->
                       eta4 (Text.Parsec.Error.mergeError err err')))
                   eta4) -}
0d787e3757c0e3f170294ca20697c60e
  setStmt2 ::
    [GHC.Types.Char]
    -> forall b.
       Text.Parsec.Prim.State [GHC.Types.Char] u
       -> (Main.Stmt
           -> Text.Parsec.Prim.State [GHC.Types.Char] u
           -> Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b)
       -> (Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b)
       -> (Main.Stmt
           -> Text.Parsec.Prim.State [GHC.Types.Char] u
           -> Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b)
       -> (Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b)
       -> Data.Functor.Identity.Identity b
  {- Arity: 6,
     Strictness: <L,U><L,U(U,U(U,U,U),U)><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,C(U)> -}
50a5cbd973bc3c1e4b032f3d710bf31b
  stmt ::
    Text.Parsec.Prim.ParsecT
      [GHC.Types.Char] st Data.Functor.Identity.Identity Main.Stmt
  {- Arity: 5,
     Strictness: <L,U(U,U(U,U,U),U)><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                Main.seqStmt4
                  `cast`
                (forall st.
                 Sym (Text.Parsec.Prim.NTCo:ParsecT[0]
                          <[GHC.Types.Char]>_R
                          <st>_R
                          <Data.Functor.Identity.Identity>_R
                          <Main.Stmt>_R)) -}
138964086a026fd8887ce7a8be7f8d2c
  symbol ::
    Text.Parsec.Prim.Stream s m GHC.Types.Char =>
    GHC.Base.String -> Text.Parsec.Prim.ParsecT s u m GHC.Base.String
  {- Arity: 7,
     Strictness: <L,U(U(U,U,U,U,U),C(U))><S,U><L,U(U,U(U,U,U),U)><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                Main.symbol1
                  `cast`
                (forall s u (m :: * -> *).
                 <Text.Parsec.Prim.Stream s m GHC.Types.Char>_R
                 ->_R <GHC.Base.String>_R
                 ->_R Sym (Text.Parsec.Prim.NTCo:ParsecT[0]
                               <s>_R <u>_R <m>_R <GHC.Base.String>_R)) -}
ed1df47fb6304e9baaffd1504bba2c99
  symbol1 ::
    Text.Parsec.Prim.Stream s m GHC.Types.Char =>
    GHC.Base.String
    -> forall b.
       Text.Parsec.Prim.State s u
       -> (GHC.Base.String
           -> Text.Parsec.Prim.State s u
           -> Text.Parsec.Error.ParseError
           -> m b)
       -> (Text.Parsec.Error.ParseError -> m b)
       -> (GHC.Base.String
           -> Text.Parsec.Prim.State s u
           -> Text.Parsec.Error.ParseError
           -> m b)
       -> (Text.Parsec.Error.ParseError -> m b)
       -> m b
  {- Arity: 7,
     Strictness: <L,U(U(U,U,U,U,U),C(U))><S,U><L,U(U,U(U,U,U),U)><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,C(U)> -}
d91e852c3f6d4f3b99870ca61bbe71fb
  term ::
    Text.Parsec.Prim.ParsecT
      [GHC.Types.Char] st Data.Functor.Identity.Identity Main.Exp
  {- Arity: 5,
     Strictness: <L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,U>,
     Unfolding: InlineRule (0, True, True)
                Main.appExp10
                  `cast`
                (forall st.
                 Sym (Text.Parsec.Prim.NTCo:ParsecT[0]
                          <[GHC.Types.Char]>_R
                          <st>_R
                          <Data.Functor.Identity.Identity>_R
                          <Main.Exp>_R)) -}
4f98bbd905b0e558e0e5fac805b1962c
  var ::
    Text.Parsec.Prim.Stream s m GHC.Types.Char =>
    Text.Parsec.Prim.ParsecT s u m [GHC.Types.Char]
  {- Arity: 6,
     Strictness: <S(S(LC(C(S))LLL)L),U(U(A,C(C1(U)),A,A,A),C(U))><L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                Main.var1
                  `cast`
                (forall s u (m :: * -> *).
                 <Text.Parsec.Prim.Stream s m GHC.Types.Char>_R
                 ->_R Sym (Text.Parsec.Prim.NTCo:ParsecT[0]
                               <s>_R <u>_R <m>_R <[GHC.Types.Char]>_R)) -}
d1cfebd4eeb512b7b591a2389237d904
  var1 ::
    Text.Parsec.Prim.Stream s m GHC.Types.Char =>
    forall b.
    Text.Parsec.Prim.State s u
    -> ([GHC.Types.Char]
        -> Text.Parsec.Prim.State s u
        -> Text.Parsec.Error.ParseError
        -> m b)
    -> (Text.Parsec.Error.ParseError -> m b)
    -> ([GHC.Types.Char]
        -> Text.Parsec.Prim.State s u
        -> Text.Parsec.Error.ParseError
        -> m b)
    -> (Text.Parsec.Error.ParseError -> m b)
    -> m b
  {- Arity: 6,
     Strictness: <S(S(LC(C(S))LLL)L),U(U(A,C(C1(U)),A,A,A),C(U))><L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,C(U)> -}
321c0632a01762de93e392a2041eaac1
  varExp ::
    Text.Parsec.Prim.Stream s m GHC.Types.Char =>
    Text.Parsec.Prim.ParsecT s u m Main.Exp
  {- Arity: 6,
     Strictness: <S(S(LC(C(S))LLL)L),U(U(A,C(C1(U)),A,A,A),C(U))><L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                Main.varExp2
                  `cast`
                (forall s u (m :: * -> *).
                 <Text.Parsec.Prim.Stream s m GHC.Types.Char>_R
                 ->_R Sym (Text.Parsec.Prim.NTCo:ParsecT[0]
                               <s>_R <u>_R <m>_R <Main.Exp>_R)) -}
9c4f41679598e42e6b073c8e16496be8
  varExp1 ::
    Text.Parsec.Prim.State [GHC.Types.Char] u
    -> (Main.Exp
        -> Text.Parsec.Prim.State [GHC.Types.Char] u
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Main.Exp
        -> Text.Parsec.Prim.State [GHC.Types.Char] u
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5,
     Strictness: <L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Unfolding: (\ @ u
                   @ b1
                   eta :: Text.Parsec.Prim.State [GHC.Types.Char] u
                   eta1 :: Main.Exp
                           -> Text.Parsec.Prim.State [GHC.Types.Char] u
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1
                   eta2 :: Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1
                   eta3 :: Main.Exp
                           -> Text.Parsec.Prim.State [GHC.Types.Char] u
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1
                   eta4 :: Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1 ->
                 Main.callStmt4
                   @ u
                   @ b1
                   eta
                   (\ x10 :: [GHC.Types.Char]
                      s2 :: Text.Parsec.Prim.State [GHC.Types.Char] u[OneShot]
                      err :: Text.Parsec.Error.ParseError[OneShot] ->
                    eta1
                      (Main.VarExp x10)
                      s2
                      (case s2 of wild { Text.Parsec.Prim.State ds3 ds4 ds5 ->
                       case ds4 of ww10 { Text.Parsec.Pos.SourcePos ww11 ww12 ww13 ->
                       case err of ww { Text.Parsec.Error.ParseError ww1 ww2 ->
                       case ww1 of ww3 { Text.Parsec.Pos.SourcePos ww4 ww5 ww6 ->
                       case Text.Parsec.Error.$wmergeError
                              ww4
                              ww5
                              ww6
                              ww2
                              ww11
                              ww12
                              ww13
                              (GHC.Types.[]
                                 @ Text.Parsec.Error.Message) of ww14 { (#,#) ww15 ww16 ->
                       Text.Parsec.Error.ParseError ww15 ww16 } } } } }))
                   eta2
                   (\ x10 :: [GHC.Types.Char]
                      s2 :: Text.Parsec.Prim.State [GHC.Types.Char] u[OneShot]
                      err :: Text.Parsec.Error.ParseError[OneShot] ->
                    eta3
                      (Main.VarExp x10)
                      s2
                      (case s2 of wild { Text.Parsec.Prim.State ds3 ds4 ds5 ->
                       case ds4 of ww10 { Text.Parsec.Pos.SourcePos ww11 ww12 ww13 ->
                       case err of ww { Text.Parsec.Error.ParseError ww1 ww2 ->
                       case ww1 of ww3 { Text.Parsec.Pos.SourcePos ww4 ww5 ww6 ->
                       case Text.Parsec.Error.$wmergeError
                              ww4
                              ww5
                              ww6
                              ww2
                              ww11
                              ww12
                              ww13
                              (GHC.Types.[]
                                 @ Text.Parsec.Error.Message) of ww14 { (#,#) ww15 ww16 ->
                       Text.Parsec.Error.ParseError ww15 ww16 } } } } }))
                   eta4) -}
0db837b038201f7af1a8a5557da3589a
  varExp2 ::
    Text.Parsec.Prim.Stream s m GHC.Types.Char =>
    forall b.
    Text.Parsec.Prim.State s u
    -> (Main.Exp
        -> Text.Parsec.Prim.State s u
        -> Text.Parsec.Error.ParseError
        -> m b)
    -> (Text.Parsec.Error.ParseError -> m b)
    -> (Main.Exp
        -> Text.Parsec.Prim.State s u
        -> Text.Parsec.Error.ParseError
        -> m b)
    -> (Text.Parsec.Error.ParseError -> m b)
    -> m b
  {- Arity: 6,
     Strictness: <S(S(LC(C(S))LLL)L),U(U(A,C(C1(U)),A,A,A),C(U))><L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Unfolding: (\ @ s
                   @ u
                   @ (m :: * -> *)
                   $dStream :: Text.Parsec.Prim.Stream s m GHC.Types.Char
                   @ b
                   eta :: Text.Parsec.Prim.State s u
                   eta1 :: Main.Exp
                           -> Text.Parsec.Prim.State s u
                           -> Text.Parsec.Error.ParseError
                           -> m b
                   eta2 :: Text.Parsec.Error.ParseError -> m b
                   eta3 :: Main.Exp
                           -> Text.Parsec.Prim.State s u
                           -> Text.Parsec.Error.ParseError
                           -> m b
                   eta4 :: Text.Parsec.Error.ParseError -> m b ->
                 Main.var1
                   @ s
                   @ u
                   @ m
                   $dStream
                   @ b
                   eta
                   (\ x10 :: [GHC.Types.Char]
                      s2 :: Text.Parsec.Prim.State s u[OneShot]
                      err :: Text.Parsec.Error.ParseError[OneShot] ->
                    eta1
                      (Main.VarExp x10)
                      s2
                      (case s2 of wild { Text.Parsec.Prim.State ds3 ds4 ds5 ->
                       case ds4 of ww10 { Text.Parsec.Pos.SourcePos ww11 ww12 ww13 ->
                       case err of ww { Text.Parsec.Error.ParseError ww1 ww2 ->
                       case ww1 of ww3 { Text.Parsec.Pos.SourcePos ww4 ww5 ww6 ->
                       case Text.Parsec.Error.$wmergeError
                              ww4
                              ww5
                              ww6
                              ww2
                              ww11
                              ww12
                              ww13
                              (GHC.Types.[]
                                 @ Text.Parsec.Error.Message) of ww14 { (#,#) ww15 ww16 ->
                       Text.Parsec.Error.ParseError ww15 ww16 } } } } }))
                   eta2
                   (\ x10 :: [GHC.Types.Char]
                      s2 :: Text.Parsec.Prim.State s u[OneShot]
                      err :: Text.Parsec.Error.ParseError[OneShot] ->
                    eta3
                      (Main.VarExp x10)
                      s2
                      (case s2 of wild { Text.Parsec.Prim.State ds3 ds4 ds5 ->
                       case ds4 of ww10 { Text.Parsec.Pos.SourcePos ww11 ww12 ww13 ->
                       case err of ww { Text.Parsec.Error.ParseError ww1 ww2 ->
                       case ww1 of ww3 { Text.Parsec.Pos.SourcePos ww4 ww5 ww6 ->
                       case Text.Parsec.Error.$wmergeError
                              ww4
                              ww5
                              ww6
                              ww2
                              ww11
                              ww12
                              ww13
                              (GHC.Types.[]
                                 @ Text.Parsec.Error.Message) of ww14 { (#,#) ww15 ww16 ->
                       Text.Parsec.Error.ParseError ww15 ww16 } } } } }))
                   eta4) -}
instance GHC.Classes.Eq [Main.Exp] = Main.$fEqExp
instance GHC.Classes.Eq [Main.Stmt] = Main.$fEqStmt
instance GHC.Classes.Eq [Main.Val] = Main.$fEqVal
instance GHC.Show.Show [Main.Exp] = Main.$fShowExp
instance GHC.Show.Show [Main.Stmt] = Main.$fShowStmt
instance GHC.Show.Show [Main.Val] = Main.$fShowVal
"SPEC/Main $fEq(,) @ [Char] @ Exp" [ALWAYS] forall $dEq :: GHC.Classes.Eq
                                                             [GHC.Types.Char]
                                                   $dEq1 :: GHC.Classes.Eq Main.Exp
  GHC.Classes.$fEq(,) @ [GHC.Types.Char] @ Main.Exp $dEq $dEq1
  = Main.$s$fEq(,)
"SPEC/Main $wunion @ String _" [0] forall @ v
                                          w :: GHC.Classes.Eq GHC.Base.String
  Data.HashMap.Base.$wunion @ [GHC.Types.Char] @ v w
  = Main.$s$wunion @ v
"SPEC/Main $wupdateOrConcatWithKey @ String _" [0] forall @ v
                                                          w :: GHC.Classes.Eq GHC.Base.String
  Data.HashMap.Base.$wupdateOrConcatWithKey @ [GHC.Types.Char] @ v w
  = Main.$s$wupdateOrConcatWithKey @ v
"SPEC/Main $wupdateOrSnocWithKey @ String _" [0] forall @ v
                                                        w :: GHC.Classes.Eq GHC.Base.String
  Data.HashMap.Base.$wupdateOrSnocWithKey @ [GHC.Types.Char] @ v w
  = Main.$s$wupdateOrSnocWithKey @ v
"SPEC/Main insert @ String _" [ALWAYS] forall @ v
                                              $dEq :: GHC.Classes.Eq GHC.Base.String
                                              $dHashable :: Data.Hashable.Class.Hashable
                                                              GHC.Base.String
  Data.HashMap.Base.insert @ [GHC.Types.Char] @ v $dEq $dHashable
  = Main.$sinsert @ v
"SPEC/Main lookup @ String _" [ALWAYS] forall @ v
                                              $dEq :: GHC.Classes.Eq GHC.Base.String
                                              $dHashable :: Data.Hashable.Class.Hashable
                                                              GHC.Base.String
  Data.HashMap.Base.lookup @ [GHC.Types.Char] @ v $dEq $dHashable
  = Main.$s!_$slookup @ v
"SPEC/Main unsafeInsert @ String _" [ALWAYS] forall @ v
                                                    $dEq :: GHC.Classes.Eq GHC.Base.String
                                                    $dHashable :: Data.Hashable.Class.Hashable
                                                                    GHC.Base.String
  Data.HashMap.Base.unsafeInsert @ [GHC.Types.Char]
                                 @ v
                                 $dEq
                                 $dHashable
  = Main.$sunsafeInsert @ v
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

